//------------------------------------------------------------------------------
//
//  Surfaces Engine (SE) - Gaming engine for Windows based on DirectX & DelphiX
//  Copyright (C) 1999-2004, 2018 by Jim Valavanis
//
//  This program is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public License
//  as published by the Free Software Foundation; either version 2
//  of the License, or (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program; if not, write to the Free Software
//  Foundation, inc., 59 Temple Place - Suite 330, Boston, MA
//  02111-1307, USA.
//
// DESCRIPTION:
//  Duke Nukem 3D utilities
//
//------------------------------------------------------------------------------
//  E-Mail: jimmyvalavanis@yahoo.gr
//------------------------------------------------------------------------------

{$I defs.inc}

unit se_Duke3DUtils;

interface

uses
  SysUtils, Classes, Graphics, se_Duke3DTypes, se_Main;

function ReadDuke3DDirectory(
  const fName: TFileName; var DIR: PDuke3DDirectories): integer;

function GetDuke3DMaps(
  const FileName: TFileName; const s: TStrings): integer;

function GetDuke3DLump(
  const FileName: TFileName; var Lump: TDuke3DEntry): boolean; overload;

function GetDuke3DLump(
  const DIR: PDuke3DDirectories; const NumEntries: integer; var Lump: TDuke3DEntry): boolean; overload;

function ReadDuke3DMapData(
  const FileName: TFileName; const MapName: string;
  var hSectors: PDuke3DSector7Array;
  var numSectors: integer;
  var hWalls: PDuke3DWall7Array;
  var numWalls: integer;
  var hSprites: PDuke3DSprite7Array;
  var numSprites: integer): boolean; overload;

function ReadDuke3DMapData(
  const DIR: PDuke3DDirectories; const numEntries: integer;
  const FileName: TFileName; const MapName: string;
  var hSectors: PDuke3DSector7Array;
  var numSectors: integer;
  var hWalls: PDuke3DWall7Array;
  var numWalls: integer;
  var hSprites: PDuke3DSprite7Array;
  var numSprites: integer;
  var posx, posy, posz: integer;
  var ang: smallint): boolean; overload;

function ReadDuke3DMapData(
  const DIR: PDuke3DDirectories; const numEntries: integer;
  const FileName: TFileName; const MapName: string;
  var hSectors: PDuke3DSector7Array;
  var numSectors: integer;
  var hWalls: PDuke3DWall7Array;
  var numWalls: integer;
  var hSprites: PDuke3DSprite7Array;
  var numSprites: integer): boolean; overload;

procedure FreeDuke3DMapData(
  var DIR: PDuke3DDirectories; const numEntries: integer;
  var hSectors: PDuke3DSector7Array; const numSectors: integer;
  var hWalls: PDuke3DWall7Array; const numWalls: integer;
  var hSprites: PDuke3DSprite7Array; const numSprites: integer); overload;

procedure FreeDuke3DMapData(
  var hSectors: PDuke3DSector7Array; const numSectors: integer;
  var hWalls: PDuke3DWall7Array; const numWalls: integer;
  var hSprites: PDuke3DSprite7Array; const numSprites: integer); overload;

procedure GetDuke3DMapData(
  const AScene: TD3DScene;
  const MainGRP: TFileName; const MapName: string; doSprites: boolean = True;
  const Factor: single = DEFDUKE3DIMPORTFACTOR;
  const cFactor: integer = DEFDUKE3DCOMPLEXITYFACTOR;
  const lboost: integer = 0);


function GetDuke3DLinkDescription(
  const GRPFileName: string; Entry: integer): string;
// πχ  'C:\DUKE3D.GRP' & '1' δίνουν επιστρεφόμενη τιμή '->C:\DUKE3D.GRP::1'

function IsDuke3DLinkInfo(const inf: string): boolean;

function GetDuke3DLinkInfo(const inf: string; var GRPFileName: string;
  var Entry: integer): boolean; overload;

function GetDuke3DLinkInfo(const inf: string; var GRPFileName: string;
  var Entry: string): boolean; overload;
// Κάνει split το inf που είναι της μορφής πχ  '->C:\DUKE3D.GRP::1' στα 'C:\DUKE3D.GRP' & '1'

function FindDuke3DDIREntry(const entry: string;
  const DIR: PDuke3DDirectories; const numEntries: integer): integer;

function ReadDuke3DEntry(const GRPFile: string; const Entry: string; var p: Pointer;
  var size: integer; DIR: PDuke3DDirectories = nil; numEntries: integer = -1): boolean;

function GetDuke3DDefMapName(const map: string): string;

function GetLastDuke3DSkyTexture: string;

procedure GetDuke3DMapDimentions(
  const hWalls: PDuke3DWall7Array; const numWalls: integer;
  var minX, minY, maxX, maxY: integer);

procedure Preview2DDuke3DMap(
  const FileName: TFileName; const mapName: string; const C: TCanvas;
  const xWidth, yHeight: integer;
  var xShift: single; var yShift: single;
  const fScale: single = 1.0; const qPoint: integer = -1); overload;

procedure Preview2DDuke3DMap(
  const hSectors: PDuke3DSector7Array; const numSectors: integer;
  const hWalls: PDuke3DWall7Array; const numWalls: integer;
  const hSprites: PDuke3DSprite7Array; const numSprites: integer;
  const C: TCanvas;
  const xWidth, yHeight: integer;
  var xShift: single; var yShift: single;
  const fScale: single = 1.0;
  minX: integer = 0; minY: integer = 0;
  maxX: integer = 0; maxY: integer = 0;
  const qPoint: integer = -1); overload;

function GetDuke3D2DPreviewNearestWallIndex(
  const hWalls: PDuke3DWall7Array; const numWalls: integer;
  const xWidth, yHeight: integer;
  var xShift: single; var yShift: single;
  const x, y: integer; // Position to look
  const fScale: single = 1.0;
  minX: integer = 0; minY: integer = 0;
  maxX: integer = 0; maxY: integer = 0): integer;

procedure FixDuke3DMapName(var MapName: string);

const
  BUILDTORADSIZE = 2048;

  TABLE_BUILDTORAD: array[0..BUILDTORADSIZE - 1] of single = (
      6.28318548202515, 6.28011751174927, 6.27704954147339, 6.27398157119751,
      6.27091360092163, 6.26784563064575, 6.26477766036987, 6.26170969009399,
      6.25864171981812, 6.25557374954224, 6.25250577926636, 6.24943780899048,
      6.2463698387146, 6.24330186843872, 6.24023389816284, 6.23716592788696,
      6.23409795761108, 6.23102998733521, 6.22796201705933, 6.22489404678345,
      6.22182607650757, 6.21875810623169, 6.21569013595581, 6.21262216567993,
      6.20955419540405, 6.20648622512817, 6.20341825485229, 6.20035028457642,
      6.19728231430054, 6.19421434402466, 6.19114637374878, 6.1880784034729,
      6.18501043319702, 6.18194246292114, 6.17887449264526, 6.17580652236938,
      6.17273855209351, 6.16967058181763, 6.16660261154175, 6.16353464126587,
      6.16046667098999, 6.15739870071411, 6.15433073043823, 6.15126276016235,
      6.14819478988647, 6.1451268196106, 6.14205884933472, 6.13899087905884,
      6.13592338562012, 6.13285541534424, 6.12978744506836, 6.12671947479248,
      6.1236515045166, 6.12058353424072, 6.11751556396484, 6.11444759368896,
      6.11137962341309, 6.10831165313721, 6.10524368286133, 6.10217571258545,
      6.09910774230957, 6.09603977203369, 6.09297180175781, 6.08990383148193,
      6.08683586120605, 6.08376789093018, 6.0806999206543, 6.07763195037842,
      6.07456398010254, 6.07149600982666, 6.06842803955078, 6.0653600692749,
      6.06229209899902, 6.05922412872314, 6.05615615844727, 6.05308818817139,
      6.05002021789551, 6.04695224761963, 6.04388427734375, 6.04081630706787,
      6.03774833679199, 6.03468036651611, 6.03161239624023, 6.02854442596436,
      6.02547645568848, 6.0224084854126, 6.01934051513672, 6.01627254486084,
      6.01320457458496, 6.01013660430908, 6.0070686340332, 6.00400066375732,
      6.00093269348145, 5.99786472320557, 5.99479675292969, 5.99172878265381,
      5.98866081237793, 5.98559284210205, 5.98252487182617, 5.97945690155029,
      5.97638893127441, 5.97332096099854, 5.97025299072266, 5.96718549728394,
      5.96411752700806, 5.96104955673218, 5.9579815864563, 5.95491361618042,
      5.95184564590454, 5.94877767562866, 5.94570970535278, 5.9426417350769,
      5.93957376480103, 5.93650579452515, 5.93343782424927, 5.93036985397339,
      5.92730188369751, 5.92423391342163, 5.92116594314575, 5.91809797286987,
      5.91503000259399, 5.91196203231812, 5.90889406204224, 5.90582609176636,
      5.90275812149048, 5.8996901512146, 5.89662218093872, 5.89355421066284,
      5.89048624038696, 5.88741827011108, 5.88435029983521, 5.88128232955933,
      5.87821435928345, 5.87514638900757, 5.87207841873169, 5.86901044845581,
      5.86594247817993, 5.86287450790405, 5.85980653762817, 5.85673856735229,
      5.85367059707642, 5.85060262680054, 5.84753465652466, 5.84446668624878,
      5.8413987159729, 5.83833074569702, 5.83526277542114, 5.83219480514526,
      5.82912683486938, 5.82605886459351, 5.82299089431763, 5.81992292404175,
      5.81685495376587, 5.81378698348999, 5.81071901321411, 5.80765104293823,
      5.80458307266235, 5.80151510238647, 5.79844760894775, 5.79537963867188,
      5.792311668396, 5.78924369812012, 5.78617572784424, 5.78310775756836,
      5.78003978729248, 5.7769718170166, 5.77390384674072, 5.77083587646484,
      5.76776790618896, 5.76469993591309, 5.76163196563721, 5.75856399536133,
      5.75549602508545, 5.75242805480957, 5.74936008453369, 5.74629211425781,
      5.74322414398193, 5.74015617370605, 5.73708820343018, 5.7340202331543,
      5.73095226287842, 5.72788429260254, 5.72481632232666, 5.72174835205078,
      5.7186803817749, 5.71561241149902, 5.71254444122314, 5.70947647094727,
      5.70640850067139, 5.70334053039551, 5.70027256011963, 5.69720458984375,
      5.69413661956787, 5.69106864929199, 5.68800067901611, 5.68493270874023,
      5.68186473846436, 5.67879676818848, 5.6757287979126, 5.67266082763672,
      5.66959285736084, 5.66652488708496, 5.66345691680908, 5.6603889465332,
      5.65732097625732, 5.65425300598145, 5.65118503570557, 5.64811706542969,
      5.64504909515381, 5.64198112487793, 5.63891315460205, 5.63584518432617,
      5.63277769088745, 5.62970972061157, 5.62664175033569, 5.62357378005981,
      5.62050580978394, 5.61743783950806, 5.61436986923218, 5.6113018989563,
      5.60823392868042, 5.60516595840454, 5.60209798812866, 5.59903001785278,
      5.5959620475769, 5.59289407730103, 5.58982610702515, 5.58675813674927,
      5.58369016647339, 5.58062219619751, 5.57755422592163, 5.57448625564575,
      5.57141828536987, 5.56835031509399, 5.56528234481812, 5.56221437454224,
      5.55914640426636, 5.55607843399048, 5.5530104637146, 5.54994249343872,
      5.54687452316284, 5.54380655288696, 5.54073858261108, 5.53767061233521,
      5.53460264205933, 5.53153467178345, 5.52846670150757, 5.52539873123169,
      5.52233076095581, 5.51926279067993, 5.51619482040405, 5.51312685012817,
      5.51005887985229, 5.50699090957642, 5.50392293930054, 5.50085496902466,
      5.49778699874878, 5.4947190284729, 5.49165105819702, 5.48858308792114,
      5.48551511764526, 5.48244714736938, 5.47937917709351, 5.47631120681763,
      5.47324323654175, 5.47017526626587, 5.46710729598999, 5.46403980255127,
      5.46097183227539, 5.45790386199951, 5.45483589172363, 5.45176792144775,
      5.44869995117188, 5.445631980896, 5.44256401062012, 5.43949604034424,
      5.43642807006836, 5.43336009979248, 5.4302921295166, 5.42722415924072,
      5.42415618896484, 5.42108821868896, 5.41802024841309, 5.41495227813721,
      5.41188430786133, 5.40881633758545, 5.40574836730957, 5.40268039703369,
      5.39961242675781, 5.39654445648193, 5.39347648620605, 5.39040851593018,
      5.3873405456543, 5.38427257537842, 5.38120460510254, 5.37813663482666,
      5.37506866455078, 5.3720006942749, 5.36893272399902, 5.36586475372314,
      5.36279678344727, 5.35972881317139, 5.35666084289551, 5.35359287261963,
      5.35052490234375, 5.34745693206787, 5.34438896179199, 5.34132099151611,
      5.33825302124023, 5.33518505096436, 5.33211708068848, 5.3290491104126,
      5.32598114013672, 5.32291316986084, 5.31984519958496, 5.31677722930908,
      5.3137092590332, 5.31064128875732, 5.30757331848145, 5.30450534820557,
      5.30143737792969, 5.29836940765381, 5.29530191421509, 5.29223394393921,
      5.28916597366333, 5.28609800338745, 5.28303003311157, 5.27996206283569,
      5.27689409255981, 5.27382612228394, 5.27075815200806, 5.26769018173218,
      5.2646222114563, 5.26155424118042, 5.25848627090454, 5.25541830062866,
      5.25235033035278, 5.2492823600769, 5.24621438980103, 5.24314641952515,
      5.24007844924927, 5.23701047897339, 5.23394250869751, 5.23087453842163,
      5.22780656814575, 5.22473859786987, 5.22167062759399, 5.21860265731812,
      5.21553468704224, 5.21246671676636, 5.20939874649048, 5.2063307762146,
      5.20326280593872, 5.20019483566284, 5.19712686538696, 5.19405889511108,
      5.19099092483521, 5.18792295455933, 5.18485498428345, 5.18178701400757,
      5.17871904373169, 5.17565107345581, 5.17258310317993, 5.16951513290405,
      5.16644716262817, 5.16337919235229, 5.16031122207642, 5.15724325180054,
      5.15417528152466, 5.15110731124878, 5.1480393409729, 5.14497137069702,
      5.14190340042114, 5.13883543014526, 5.13576745986938, 5.13269948959351,
      5.12963151931763, 5.12656402587891, 5.12349605560303, 5.12042808532715,
      5.11736011505127, 5.11429214477539, 5.11122417449951, 5.10815620422363,
      5.10508823394775, 5.10202026367188, 5.098952293396, 5.09588432312012,
      5.09281635284424, 5.08974838256836, 5.08668041229248, 5.0836124420166,
      5.08054447174072, 5.07747650146484, 5.07440853118896, 5.07134056091309,
      5.06827259063721, 5.06520462036133, 5.06213665008545, 5.05906867980957,
      5.05600070953369, 5.05293273925781, 5.04986476898193, 5.04679679870605,
      5.04372882843018, 5.0406608581543, 5.03759288787842, 5.03452491760254,
      5.03145694732666, 5.02838897705078, 5.0253210067749, 5.02225303649902,
      5.01918506622314, 5.01611709594727, 5.01304912567139, 5.00998115539551,
      5.00691318511963, 5.00384521484375, 5.00077724456787, 4.99770927429199,
      4.99464130401611, 4.99157333374023, 4.98850536346436, 4.98543739318848,
      4.9823694229126, 4.97930145263672, 4.97623348236084, 4.97316551208496,
      4.97009754180908, 4.9670295715332, 4.96396160125732, 4.96089363098145,
      4.95782613754272, 4.95475816726685, 4.95169019699097, 4.94862222671509,
      4.94555425643921, 4.94248628616333, 4.93941831588745, 4.93635034561157,
      4.93328237533569, 4.93021440505981, 4.92714643478394, 4.92407846450806,
      4.92101049423218, 4.9179425239563, 4.91487455368042, 4.91180658340454,
      4.90873861312866, 4.90567064285278, 4.9026026725769, 4.89953470230103,
      4.89646673202515, 4.89339876174927, 4.89033079147339, 4.88726282119751,
      4.88419485092163, 4.88112688064575, 4.87805891036987, 4.87499094009399,
      4.87192296981812, 4.86885499954224, 4.86578702926636, 4.86271905899048,
      4.8596510887146, 4.85658311843872, 4.85351514816284, 4.85044717788696,
      4.84737920761108, 4.84431123733521, 4.84124326705933, 4.83817529678345,
      4.83510732650757, 4.83203935623169, 4.82897138595581, 4.82590341567993,
      4.82283544540405, 4.81976747512817, 4.81669950485229, 4.81363153457642,
      4.81056356430054, 4.80749559402466, 4.80442762374878, 4.8013596534729,
      4.79829168319702, 4.79522371292114, 4.79215621948242, 4.78908824920654,
      4.78602027893066, 4.78295230865479, 4.77988433837891, 4.77681636810303,
      4.77374839782715, 4.77068042755127, 4.76761245727539, 4.76454448699951,
      4.76147651672363, 4.75840854644775, 4.75534057617188, 4.752272605896,
      4.74920463562012, 4.74613666534424, 4.74306869506836, 4.74000072479248,
      4.7369327545166, 4.73386478424072, 4.73079681396484, 4.72772884368896,
      4.72466087341309, 4.72159290313721, 4.71852493286133, 4.71545696258545,
      4.71238899230957, 4.70932102203369, 4.70625305175781, 4.70318508148193,
      4.70011711120605, 4.69704914093018, 4.6939811706543, 4.69091320037842,
      4.68784523010254, 4.68477725982666, 4.68170928955078, 4.6786413192749,
      4.67557334899902, 4.67250537872314, 4.66943740844727, 4.66636943817139,
      4.66330146789551, 4.66023349761963, 4.65716552734375, 4.65409755706787,
      4.65102958679199, 4.64796161651611, 4.64489364624023, 4.64182567596436,
      4.63875770568848, 4.6356897354126, 4.63262176513672, 4.62955379486084,
      4.62648582458496, 4.62341833114624, 4.62035036087036, 4.61728239059448,
      4.6142144203186, 4.61114645004272, 4.60807847976685, 4.60501050949097,
      4.60194253921509, 4.59887456893921, 4.59580659866333, 4.59273862838745,
      4.58967065811157, 4.58660268783569, 4.58353471755981, 4.58046674728394,
      4.57739877700806, 4.57433080673218, 4.5712628364563, 4.56819486618042,
      4.56512689590454, 4.56205892562866, 4.55899095535278, 4.5559229850769,
      4.55285501480103, 4.54978704452515, 4.54671907424927, 4.54365110397339,
      4.54058313369751, 4.53751516342163, 4.53444719314575, 4.53137922286987,
      4.52831125259399, 4.52524328231812, 4.52217531204224, 4.51910734176636,
      4.51603937149048, 4.5129714012146, 4.50990343093872, 4.50683546066284,
      4.50376749038696, 4.50069952011108, 4.49763154983521, 4.49456357955933,
      4.49149560928345, 4.48842763900757, 4.48535966873169, 4.48229169845581,
      4.47922372817993, 4.47615575790405, 4.47308778762817, 4.47001981735229,
      4.46695184707642, 4.46388387680054, 4.46081590652466, 4.45774793624878,
      4.45468044281006, 4.45161247253418, 4.4485445022583, 4.44547653198242,
      4.44240856170654, 4.43934059143066, 4.43627262115479, 4.43320465087891,
      4.43013668060303, 4.42706871032715, 4.42400074005127, 4.42093276977539,
      4.41786479949951, 4.41479682922363, 4.41172885894775, 4.40866088867188,
      4.405592918396, 4.40252494812012, 4.39945697784424, 4.39638900756836,
      4.39332103729248, 4.3902530670166, 4.38718509674072, 4.38411712646484,
      4.38104915618896, 4.37798118591309, 4.37491321563721, 4.37184524536133,
      4.36877727508545, 4.36570930480957, 4.36264133453369, 4.35957336425781,
      4.35650539398193, 4.35343742370605, 4.35036945343018, 4.3473014831543,
      4.34423351287842, 4.34116554260254, 4.33809757232666, 4.33502960205078,
      4.3319616317749, 4.32889366149902, 4.32582569122314, 4.32275772094727,
      4.31968975067139, 4.31662178039551, 4.31355381011963, 4.31048583984375,
      4.30741786956787, 4.30434989929199, 4.30128192901611, 4.29821395874023,
      4.29514598846436, 4.29207801818848, 4.2890100479126, 4.28594255447388,
      4.282874584198, 4.27980661392212, 4.27673864364624, 4.27367067337036,
      4.27060270309448, 4.2675347328186, 4.26446676254272, 4.26139879226685,
      4.25833082199097, 4.25526285171509, 4.25219488143921, 4.24912691116333,
      4.24605894088745, 4.24299097061157, 4.23992300033569, 4.23685503005981,
      4.23378705978394, 4.23071908950806, 4.22765111923218, 4.2245831489563,
      4.22151517868042, 4.21844720840454, 4.21537923812866, 4.21231126785278,
      4.2092432975769, 4.20617532730103, 4.20310735702515, 4.20003938674927,
      4.19697141647339, 4.19390344619751, 4.19083547592163, 4.18776750564575,
      4.18469953536987, 4.18163156509399, 4.17856359481812, 4.17549562454224,
      4.17242765426636, 4.16935968399048, 4.1662917137146, 4.16322374343872,
      4.16015577316284, 4.15708780288696, 4.15401983261108, 4.15095186233521,
      4.14788389205933, 4.14481592178345, 4.14174795150757, 4.13867998123169,
      4.13561201095581, 4.13254404067993, 4.12947607040405, 4.12640810012817,
      4.12334012985229, 4.12027215957642, 4.1172046661377, 4.11413669586182,
      4.11106872558594, 4.10800075531006, 4.10493278503418, 4.1018648147583,
      4.09879684448242, 4.09572887420654, 4.09266090393066, 4.08959293365479,
      4.08652496337891, 4.08345699310303, 4.08038902282715, 4.07732105255127,
      4.07425308227539, 4.07118511199951, 4.06811714172363, 4.06504917144775,
      4.06198120117188, 4.058913230896, 4.05584526062012, 4.05277729034424,
      4.04970932006836, 4.04664134979248, 4.0435733795166, 4.04050540924072,
      4.03743743896484, 4.03436946868896, 4.03130149841309, 4.02823352813721,
      4.02516555786133, 4.02209758758545, 4.01902961730957, 4.01596164703369,
      4.01289367675781, 4.00982570648193, 4.00675773620605, 4.00368976593018,
      4.0006217956543, 3.99755382537842, 3.99448585510254, 3.99141812324524,
      3.98835015296936, 3.98528218269348, 3.9822142124176, 3.97914624214172,
      3.97607827186584, 3.97301030158997, 3.96994233131409, 3.96687436103821,
      3.96380639076233, 3.96073842048645, 3.95767045021057, 3.95460247993469,
      3.95153450965881, 3.94846653938293, 3.94539856910706, 3.94233059883118,
      3.9392626285553, 3.93619465827942, 3.93312668800354, 3.93005871772766,
      3.92699074745178, 3.9239227771759, 3.92085480690002, 3.91778683662415,
      3.91471886634827, 3.91165089607239, 3.90858316421509, 3.90551519393921,
      3.90244722366333, 3.89937925338745, 3.89631128311157, 3.89324331283569,
      3.89017534255981, 3.88710737228394, 3.88403940200806, 3.88097143173218,
      3.8779034614563, 3.87483549118042, 3.87176752090454, 3.86869955062866,
      3.86563158035278, 3.8625636100769, 3.85949563980103, 3.85642766952515,
      3.85335969924927, 3.85029172897339, 3.84722375869751, 3.84415578842163,
      3.84108781814575, 3.83801984786987, 3.83495187759399, 3.83188390731812,
      3.82881593704224, 3.82574796676636, 3.82268023490906, 3.81961226463318,
      3.8165442943573, 3.81347632408142, 3.81040835380554, 3.80734038352966,
      3.80427241325378, 3.80120444297791, 3.79813647270203, 3.79506850242615,
      3.79200053215027, 3.78893256187439, 3.78586459159851, 3.78279662132263,
      3.77972865104675, 3.77666068077087, 3.773592710495, 3.77052474021912,
      3.76745676994324, 3.76438879966736, 3.76132082939148, 3.7582528591156,
      3.75518488883972, 3.75211691856384, 3.74904894828796, 3.74598097801208,
      3.74291300773621, 3.73984527587891, 3.73677730560303, 3.73370933532715,
      3.73064136505127, 3.72757339477539, 3.72450542449951, 3.72143745422363,
      3.71836948394775, 3.71530151367188, 3.712233543396, 3.70916557312012,
      3.70609760284424, 3.70302963256836, 3.69996166229248, 3.6968936920166,
      3.69382572174072, 3.69075775146484, 3.68768978118896, 3.68462181091309,
      3.68155384063721, 3.67848587036133, 3.67541790008545, 3.67234992980957,
      3.66928195953369, 3.66621398925781, 3.66314601898193, 3.66007804870605,
      3.65701031684875, 3.65394234657288, 3.650874376297, 3.64780640602112,
      3.64473843574524, 3.64167046546936, 3.63860249519348, 3.6355345249176,
      3.63246655464172, 3.62939858436584, 3.62633061408997, 3.62326264381409,
      3.62019467353821, 3.61712670326233, 3.61405873298645, 3.61099076271057,
      3.60792279243469, 3.60485482215881, 3.60178685188293, 3.59871888160706,
      3.59565091133118, 3.5925829410553, 3.58951497077942, 3.58644700050354,
      3.58337903022766, 3.58031105995178, 3.5772430896759, 3.57417511940002,
      3.57110738754272, 3.56803941726685, 3.56497144699097, 3.56190347671509,
      3.55883550643921, 3.55576753616333, 3.55269956588745, 3.54963159561157,
      3.54656362533569, 3.54349565505981, 3.54042768478394, 3.53735971450806,
      3.53429174423218, 3.5312237739563, 3.52815580368042, 3.52508783340454,
      3.52201986312866, 3.51895189285278, 3.5158839225769, 3.51281595230103,
      3.50974798202515, 3.50668001174927, 3.50361204147339, 3.50054407119751,
      3.49747610092163, 3.49440813064575, 3.49134016036987, 3.48827242851257,
      3.48520445823669, 3.48213648796082, 3.47906851768494, 3.47600054740906,
      3.47293257713318, 3.4698646068573, 3.46679663658142, 3.46372866630554,
      3.46066069602966, 3.45759272575378, 3.45452475547791, 3.45145678520203,
      3.44838881492615, 3.44532084465027, 3.44225287437439, 3.43918490409851,
      3.43611693382263, 3.43304896354675, 3.42998099327087, 3.426913022995,
      3.42384505271912, 3.42077708244324, 3.41770911216736, 3.41464114189148,
      3.4115731716156, 3.40850520133972, 3.40543723106384, 3.40236949920654,
      3.39930152893066, 3.39623355865479, 3.39316558837891, 3.39009761810303,
      3.38702964782715, 3.38396167755127, 3.38089370727539, 3.37782573699951,
      3.37475776672363, 3.37168979644775, 3.36862182617188, 3.365553855896,
      3.36248588562012, 3.35941791534424, 3.35634994506836, 3.35328197479248,
      3.3502140045166, 3.34714603424072, 3.34407806396484, 3.34101009368896,
      3.33794212341309, 3.33487415313721, 3.33180618286133, 3.32873821258545,
      3.32567024230957, 3.32260227203369, 3.31953454017639, 3.31646656990051,
      3.31339859962463, 3.31033062934875, 3.30726265907288, 3.304194688797,
      3.30112671852112, 3.29805874824524, 3.29499077796936, 3.29192280769348,
      3.2888548374176, 3.28578686714172, 3.28271889686584, 3.27965092658997,
      3.27658295631409, 3.27351498603821, 3.27044701576233, 3.26737904548645,
      3.26431107521057, 3.26124310493469, 3.25817513465881, 3.25510716438293,
      3.25203919410706, 3.24897122383118, 3.2459032535553, 3.24283528327942,
      3.23976731300354, 3.23669958114624, 3.23363161087036, 3.23056364059448,
      3.2274956703186, 3.22442770004272, 3.22135972976685, 3.21829175949097,
      3.21522378921509, 3.21215581893921, 3.20908784866333, 3.20601987838745,
      3.20295190811157, 3.19988393783569, 3.19681596755981, 3.19374799728394,
      3.19068002700806, 3.18761205673218, 3.1845440864563, 3.18147611618042,
      3.17840814590454, 3.17534017562866, 3.17227220535278, 3.1692042350769,
      3.16613626480103, 3.16306829452515, 3.16000032424927, 3.15693235397339,
      3.15386438369751, 3.15079665184021, 3.14772868156433, 3.14466071128845,
      3.14159274101257, 3.13852477073669, 3.13545680046082, 3.13238883018494,
      3.12932085990906, 3.12625288963318, 3.1231849193573, 3.12011694908142,
      3.11704897880554, 3.11398100852966, 3.11091303825378, 3.10784506797791,
      3.10477709770203, 3.10170912742615, 3.09864115715027, 3.09557318687439,
      3.09250521659851, 3.08943724632263, 3.08636927604675, 3.08330130577087,
      3.080233335495, 3.07716536521912, 3.07409739494324, 3.07102942466736,
      3.06796169281006, 3.06489372253418, 3.0618257522583, 3.05875778198242,
      3.05568981170654, 3.05262184143066, 3.04955387115479, 3.04648590087891,
      3.04341793060303, 3.04034996032715, 3.03728199005127, 3.03421401977539,
      3.03114604949951, 3.02807807922363, 3.02501010894775, 3.02194213867188,
      3.018874168396, 3.01580619812012, 3.01273822784424, 3.00967025756836,
      3.00660228729248, 3.0035343170166, 3.00046634674072, 2.99739837646484,
      2.99433040618896, 2.99126243591309, 2.98819446563721, 2.98512649536133,
      2.98205876350403, 2.97899079322815, 2.97592282295227, 2.97285485267639,
      2.96978688240051, 2.96671891212463, 2.96365094184875, 2.96058297157288,
      2.957515001297, 2.95444703102112, 2.95137906074524, 2.94831109046936,
      2.94524312019348, 2.9421751499176, 2.93910717964172, 2.93603920936584,
      2.93297123908997, 2.92990326881409, 2.92683529853821, 2.92376732826233,
      2.92069935798645, 2.91763138771057, 2.91456341743469, 2.91149544715881,
      2.90842747688293, 2.90535950660706, 2.90229153633118, 2.89922380447388,
      2.896155834198, 2.89308786392212, 2.89001989364624, 2.88695192337036,
      2.88388395309448, 2.8808159828186, 2.87774801254272, 2.87468004226685,
      2.87161207199097, 2.86854410171509, 2.86547613143921, 2.86240816116333,
      2.85934019088745, 2.85627222061157, 2.85320425033569, 2.85013628005981,
      2.84706830978394, 2.84400033950806, 2.84093236923218, 2.8378643989563,
      2.83479642868042, 2.83172845840454, 2.82866048812866, 2.82559251785278,
      2.8225245475769, 2.81945657730103, 2.81638884544373, 2.81332087516785,
      2.81025290489197, 2.80718493461609, 2.80411696434021, 2.80104899406433,
      2.79798102378845, 2.79491305351257, 2.79184508323669, 2.78877711296082,
      2.78570914268494, 2.78264117240906, 2.77957320213318, 2.7765052318573,
      2.77343726158142, 2.77036929130554, 2.76730132102966, 2.76423335075378,
      2.76116538047791, 2.75809741020203, 2.75502943992615, 2.75196146965027,
      2.74889349937439, 2.74582552909851, 2.74275755882263, 2.73968958854675,
      2.73662161827087, 2.733553647995, 2.7304859161377, 2.72741794586182,
      2.72434997558594, 2.72128200531006, 2.71821403503418, 2.7151460647583,
      2.71207809448242, 2.70901012420654, 2.70594215393066, 2.70287418365479,
      2.69980621337891, 2.69673824310303, 2.69367027282715, 2.69060230255127,
      2.68753433227539, 2.68446636199951, 2.68139839172363, 2.67833042144775,
      2.67526245117188, 2.672194480896, 2.66912651062012, 2.66605854034424,
      2.66299057006836, 2.65992259979248, 2.6568546295166, 2.65378665924072,
      2.65071868896484, 2.64765095710754, 2.64458298683167, 2.64151501655579,
      2.63844704627991, 2.63537907600403, 2.63231110572815, 2.62924313545227,
      2.62617516517639, 2.62310719490051, 2.62003922462463, 2.61697125434875,
      2.61390328407288, 2.610835313797, 2.60776734352112, 2.60469937324524,
      2.60163140296936, 2.59856343269348, 2.5954954624176, 2.59242749214172,
      2.58935952186584, 2.58629155158997, 2.58322358131409, 2.58015561103821,
      2.57708764076233, 2.57401967048645, 2.57095170021057, 2.56788372993469,
      2.56481575965881, 2.56174802780151, 2.55868005752563, 2.55561208724976,
      2.55254411697388, 2.549476146698, 2.54640817642212, 2.54334020614624,
      2.54027223587036, 2.53720426559448, 2.5341362953186, 2.53106832504272,
      2.52800035476685, 2.52493238449097, 2.52186441421509, 2.51879644393921,
      2.51572847366333, 2.51266050338745, 2.50959253311157, 2.50652456283569,
      2.50345659255981, 2.50038862228394, 2.49732065200806, 2.49425268173218,
      2.4911847114563, 2.48811674118042, 2.48504877090454, 2.48198080062866,
      2.47891306877136, 2.47584509849548, 2.4727771282196, 2.46970915794373,
      2.46664118766785, 2.46357321739197, 2.46050524711609, 2.45743727684021,
      2.45436930656433, 2.45130133628845, 2.44823336601257, 2.44516539573669,
      2.44209742546082, 2.43902945518494, 2.43596148490906, 2.43289351463318,
      2.4298255443573, 2.42675757408142, 2.42368960380554, 2.42062163352966,
      2.41755366325378, 2.41448569297791, 2.41141772270203, 2.40834975242615,
      2.40528178215027, 2.40221381187439, 2.39914584159851, 2.39607810974121,
      2.39301013946533, 2.38994216918945, 2.38687419891357, 2.3838062286377,
      2.38073825836182, 2.37767028808594, 2.37460231781006, 2.37153434753418,
      2.3684663772583, 2.36539840698242, 2.36233043670654, 2.35926246643066,
      2.35619449615479, 2.35312652587891, 2.35005855560303, 2.34699058532715,
      2.34392261505127, 2.34085464477539, 2.33778667449951, 2.33471870422363,
      2.33165073394775, 2.32858276367188, 2.325514793396, 2.32244682312012,
      2.31937885284424, 2.31631088256836, 2.31324291229248, 2.31017518043518,
      2.3071072101593, 2.30403923988342, 2.30097126960754, 2.29790329933167,
      2.29483532905579, 2.29176735877991, 2.28869938850403, 2.28563141822815,
      2.28256344795227, 2.27949547767639, 2.27642750740051, 2.27335953712463,
      2.27029156684875, 2.26722359657288, 2.264155626297, 2.26108765602112,
      2.25801968574524, 2.25495171546936, 2.25188374519348, 2.2488157749176,
      2.24574780464172, 2.24267983436584, 2.23961186408997, 2.23654389381409,
      2.23347592353821, 2.23040795326233, 2.22734022140503, 2.22427225112915,
      2.22120428085327, 2.21813631057739, 2.21506834030151, 2.21200037002563,
      2.20893239974976, 2.20586442947388, 2.202796459198, 2.19972848892212,
      2.19666051864624, 2.19359254837036, 2.19052457809448, 2.1874566078186,
      2.18438863754272, 2.18132066726685, 2.17825269699097, 2.17518472671509,
      2.17211675643921, 2.16904878616333, 2.16598081588745, 2.16291284561157,
      2.15984487533569, 2.15677690505981, 2.15370893478394, 2.15064096450806,
      2.14757299423218, 2.1445050239563, 2.141437292099, 2.13836932182312,
      2.13530135154724, 2.13223338127136, 2.12916541099548, 2.1260974407196,
      2.12302947044373, 2.11996150016785, 2.11689352989197, 2.11382555961609,
      2.11075758934021, 2.10768961906433, 2.10462164878845, 2.10155367851257,
      2.09848570823669, 2.09541773796082, 2.09234976768494, 2.08928179740906,
      2.08621382713318, 2.0831458568573, 2.08007788658142, 2.07700991630554,
      2.07394194602966, 2.07087397575378, 2.06780600547791, 2.06473803520203,
      2.06167006492615, 2.05860233306885, 2.05553436279297, 2.05246639251709,
      2.04939842224121, 2.04633045196533, 2.04326248168945, 2.04019451141357,
      2.0371265411377, 2.03405857086182, 2.03099060058594, 2.02792263031006,
      2.02485466003418, 2.0217866897583, 2.01871871948242, 2.01565074920654,
      2.01258277893066, 2.00951480865479, 2.00644683837891, 2.00337886810303,
      2.00031089782715, 1.99724292755127, 1.99417507648468, 1.9911071062088,
      1.98803913593292, 1.98497116565704, 1.98190319538116, 1.97883522510529,
      1.97576725482941, 1.97269928455353, 1.96963131427765, 1.96656334400177,
      1.96349537372589, 1.96042740345001, 1.95735943317413, 1.95429158210754,
      1.95122361183167, 1.94815564155579, 1.94508767127991, 1.94201970100403,
      1.93895173072815, 1.93588376045227, 1.93281579017639, 1.92974781990051,
      1.92667984962463, 1.92361187934875, 1.92054390907288, 1.917475938797,
      1.91440796852112, 1.91134011745453, 1.90827214717865, 1.90520417690277,
      1.90213620662689, 1.89906823635101, 1.89600026607513, 1.89293229579926,
      1.88986432552338, 1.8867963552475, 1.88372838497162, 1.88066041469574,
      1.87759244441986, 1.87452447414398, 1.8714565038681, 1.86838865280151,
      1.86532068252563, 1.86225271224976, 1.85918474197388, 1.856116771698,
      1.85304880142212, 1.84998083114624, 1.84691286087036, 1.84384489059448,
      1.8407769203186, 1.83770895004272, 1.83464097976685, 1.83157300949097,
      1.82850515842438, 1.8254371881485, 1.82236921787262, 1.81930124759674,
      1.81623327732086, 1.81316530704498, 1.8100973367691, 1.80702936649323,
      1.80396139621735, 1.80089342594147, 1.79782545566559, 1.79475748538971,
      1.79168951511383, 1.78862154483795, 1.78555369377136, 1.78248572349548,
      1.7794177532196, 1.77634978294373, 1.77328181266785, 1.77021384239197,
      1.76714587211609, 1.76407790184021, 1.76100993156433, 1.75794196128845,
      1.75487399101257, 1.75180602073669, 1.74873805046082, 1.74567008018494,
      1.74260222911835, 1.73953425884247, 1.73646628856659, 1.73339831829071,
      1.73033034801483, 1.72726237773895, 1.72419440746307, 1.72112643718719,
      1.71805846691132, 1.71499049663544, 1.71192252635956, 1.70885455608368,
      1.7057865858078, 1.70271861553192, 1.69965076446533, 1.69658279418945,
      1.69351482391357, 1.6904468536377, 1.68737888336182, 1.68431091308594,
      1.68124294281006, 1.67817497253418, 1.6751070022583, 1.67203903198242,
      1.66897106170654, 1.66590309143066, 1.66283512115479, 1.6597672700882,
      1.65669929981232, 1.65363132953644, 1.65056335926056, 1.64749538898468,
      1.6444274187088, 1.64135944843292, 1.63829147815704, 1.63522350788116,
      1.63215553760529, 1.62908756732941, 1.62601959705353, 1.62295162677765,
      1.61988365650177, 1.61681580543518, 1.6137478351593, 1.61067986488342,
      1.60761189460754, 1.60454392433167, 1.60147595405579, 1.59840798377991,
      1.59534001350403, 1.59227204322815, 1.58920407295227, 1.58613610267639,
      1.58306813240051, 1.58000016212463, 1.57693219184875, 1.57386434078217,
      1.57079637050629, 1.56772840023041, 1.56466042995453, 1.56159245967865,
      1.55852448940277, 1.55545651912689, 1.55238854885101, 1.54932057857513,
      1.54625260829926, 1.54318463802338, 1.5401166677475, 1.53704869747162,
      1.53398084640503, 1.53091287612915, 1.52784490585327, 1.52477693557739,
      1.52170896530151, 1.51864099502563, 1.51557302474976, 1.51250505447388,
      1.509437084198, 1.50636911392212, 1.50330114364624, 1.50023317337036,
      1.49716520309448, 1.4940972328186, 1.49102938175201, 1.48796141147614,
      1.48489344120026, 1.48182547092438, 1.4787575006485, 1.47568953037262,
      1.47262156009674, 1.46955358982086, 1.46648561954498, 1.4634176492691,
      1.46034967899323, 1.45728170871735, 1.45421373844147, 1.45114576816559,
      1.448077917099, 1.44500994682312, 1.44194197654724, 1.43887400627136,
      1.43580603599548, 1.4327380657196, 1.42967009544373, 1.42660212516785,
      1.42353415489197, 1.42046618461609, 1.41739821434021, 1.41433024406433,
      1.41126227378845, 1.40819442272186, 1.40512645244598, 1.4020584821701,
      1.39899051189423, 1.39592254161835, 1.39285457134247, 1.38978660106659,
      1.38671863079071, 1.38365066051483, 1.38058269023895, 1.37751471996307,
      1.37444674968719, 1.37137877941132, 1.36831080913544, 1.36524295806885,
      1.36217498779297, 1.35910701751709, 1.35603904724121, 1.35297107696533,
      1.34990310668945, 1.34683513641357, 1.3437671661377, 1.34069919586182,
      1.33763122558594, 1.33456325531006, 1.33149528503418, 1.3284273147583,
      1.32535934448242, 1.32229149341583, 1.31922352313995, 1.31615555286407,
      1.3130875825882, 1.31001961231232, 1.30695164203644, 1.30388367176056,
      1.30081570148468, 1.2977477312088, 1.29467976093292, 1.29161179065704,
      1.28854382038116, 1.28547585010529, 1.28240787982941, 1.27934002876282,
      1.27627205848694, 1.27320408821106, 1.27013611793518, 1.2670681476593,
      1.26400017738342, 1.26093220710754, 1.25786423683167, 1.25479626655579,
      1.25172829627991, 1.24866032600403, 1.24559235572815, 1.24252438545227,
      1.23945653438568, 1.2363885641098, 1.23332059383392, 1.23025262355804,
      1.22718465328217, 1.22411668300629, 1.22104871273041, 1.21798074245453,
      1.21491277217865, 1.21184480190277, 1.20877683162689, 1.20570886135101,
      1.20264089107513, 1.19957292079926, 1.19650506973267, 1.19343709945679,
      1.19036912918091, 1.18730115890503, 1.18423318862915, 1.18116521835327,
      1.17809724807739, 1.17502927780151, 1.17196130752563, 1.16889333724976,
      1.16582536697388, 1.162757396698, 1.15968942642212, 1.15662145614624,
      1.15355360507965, 1.15048563480377, 1.14741766452789, 1.14434969425201,
      1.14128172397614, 1.13821375370026, 1.13514578342438, 1.1320778131485,
      1.12900984287262, 1.12594187259674, 1.12287390232086, 1.11980593204498,
      1.1167379617691, 1.11367011070251, 1.11060214042664, 1.10753417015076,
      1.10446619987488, 1.101398229599, 1.09833025932312, 1.09526228904724,
      1.09219431877136, 1.08912634849548, 1.0860583782196, 1.08299040794373,
      1.07992243766785, 1.07685446739197, 1.07378649711609, 1.0707186460495,
      1.06765067577362, 1.06458270549774, 1.06151473522186, 1.05844676494598,
      1.0553787946701, 1.05231082439423, 1.04924285411835, 1.04617488384247,
      1.04310691356659, 1.04003894329071, 1.03697097301483, 1.03390300273895,
      1.03083503246307, 1.02776718139648, 1.02469921112061, 1.02163124084473,
      1.01856327056885, 1.01549530029297, 1.01242733001709, 1.00935935974121,
      1.00629138946533, 1.00322341918945, 1.00015544891357, 0.99708753824234,
      0.994019567966461, 0.990951597690582, 0.987883627414703, 0.984815657138824,
      0.981747686862946, 0.978679716587067, 0.975611805915833, 0.972543835639954,
      0.969475865364075, 0.966407895088196, 0.963339924812317, 0.960271954536438,
      0.957203984260559, 0.954136073589325, 0.951068103313446, 0.948000133037567,
      0.944932162761688, 0.941864192485809, 0.93879622220993, 0.935728251934052,
      0.932660341262817, 0.929592370986938, 0.92652440071106, 0.923456430435181,
      0.920388460159302, 0.917320489883423, 0.914252579212189, 0.91118460893631,
      0.908116638660431, 0.905048668384552, 0.901980698108673, 0.898912727832794,
      0.895844757556915, 0.892776846885681, 0.889708876609802, 0.886640906333923,
      0.883572936058044, 0.880504965782166, 0.877436995506287, 0.874369025230408,
      0.871301114559174, 0.868233144283295, 0.865165174007416, 0.862097203731537,
      0.859029233455658, 0.855961263179779, 0.8528932929039, 0.849825382232666,
      0.846757411956787, 0.843689441680908, 0.840621471405029, 0.83755350112915,
      0.834485530853271, 0.831417560577393, 0.828349649906158, 0.82528167963028,
      0.822213709354401, 0.819145739078522, 0.816077768802643, 0.813009798526764,
      0.809941828250885, 0.806873917579651, 0.803805947303772, 0.800737977027893,
      0.797670006752014, 0.794602036476135, 0.791534066200256, 0.788466095924377,
      0.785398185253143, 0.782330214977264, 0.779262244701385, 0.776194274425507,
      0.773126304149628, 0.770058333873749, 0.766990423202515, 0.763922452926636,
      0.760854482650757, 0.757786512374878, 0.754718542098999, 0.75165057182312,
      0.748582601547241, 0.745514690876007, 0.742446720600128, 0.739378750324249,
      0.73631078004837, 0.733242809772491, 0.730174839496613, 0.727106869220734,
      0.7240389585495, 0.720970988273621, 0.717903017997742, 0.714835047721863,
      0.711767077445984, 0.708699107170105, 0.705631136894226, 0.702563226222992,
      0.699495255947113, 0.696427285671234, 0.693359315395355, 0.690291345119476,
      0.687223374843597, 0.684155404567719, 0.681087493896484, 0.678019523620605,
      0.674951553344727, 0.671883583068848, 0.668815612792969, 0.66574764251709,
      0.662679672241211, 0.659611761569977, 0.656543791294098, 0.653475821018219,
      0.65040785074234, 0.647339880466461, 0.644271910190582, 0.641203939914703,
      0.638136029243469, 0.63506805896759, 0.632000088691711, 0.628932118415833,
      0.625864148139954, 0.622796177864075, 0.619728267192841, 0.616660296916962,
      0.613592326641083, 0.610524356365204, 0.607456386089325, 0.604388415813446,
      0.601320445537567, 0.598252534866333, 0.595184564590454, 0.592116594314575,
      0.589048624038696, 0.585980653762817, 0.582912683486938, 0.57984471321106,
      0.576776802539825, 0.573708832263947, 0.570640861988068, 0.567572891712189,
      0.56450492143631, 0.561436951160431, 0.558368980884552, 0.555301070213318,
      0.552233099937439, 0.54916512966156, 0.546097159385681, 0.543029189109802,
      0.539961218833923, 0.536893248558044, 0.53382533788681, 0.530757367610931,
      0.527689397335052, 0.524621427059174, 0.521553456783295, 0.518485486507416,
      0.515417516231537, 0.512349605560303, 0.509281635284424, 0.506213665008545,
      0.503145694732666, 0.500077724456787, 0.497009783983231, 0.493941813707352,
      0.490873843431473, 0.487805902957916, 0.484737932682037, 0.481669962406158,
      0.47860199213028, 0.475534051656723, 0.472466081380844, 0.469398111104965,
      0.466330170631409, 0.46326220035553, 0.460194230079651, 0.457126289606094,
      0.454058319330215, 0.450990349054337, 0.447922378778458, 0.444854438304901,
      0.441786468029022, 0.438718497753143, 0.435650557279587, 0.432582587003708,
      0.429514616727829, 0.42644664645195, 0.423378705978394, 0.420310735702515,
      0.417242765426636, 0.414174824953079, 0.4111068546772, 0.408038884401321,
      0.404970914125443, 0.401902973651886, 0.398835003376007, 0.395767033100128,
      0.392699092626572, 0.389631122350693, 0.386563152074814, 0.383495211601257,
      0.380427241325378, 0.3773592710495, 0.374291300773621, 0.371223360300064,
      0.368155390024185, 0.365087419748306, 0.36201947927475, 0.358951508998871,
      0.355883538722992, 0.352815568447113, 0.349747627973557, 0.346679657697678,
      0.343611687421799, 0.340543746948242, 0.337475776672363, 0.334407806396484,
      0.331339836120605, 0.328271895647049, 0.32520392537117, 0.322135955095291,
      0.319068014621735, 0.316000044345856, 0.312932074069977, 0.30986413359642,
      0.306796163320541, 0.303728193044662, 0.300660222768784, 0.297592282295227,
      0.294524312019348, 0.291456341743469, 0.288388401269913, 0.285320430994034,
      0.282252460718155, 0.279184490442276, 0.276116549968719, 0.273048579692841,
      0.269980609416962, 0.266912668943405, 0.263844698667526, 0.260776728391647,
      0.257708758115768, 0.254640817642212, 0.251572847366333, 0.248504891991615,
      0.245436921715736, 0.242368966341019, 0.23930099606514, 0.236233040690422,
      0.233165085315704, 0.230097115039825, 0.227029159665108, 0.223961189389229,
      0.220893234014511, 0.217825278639793, 0.214757308363914, 0.211689352989197,
      0.208621382713318, 0.2055534273386, 0.202485457062721, 0.199417501688004,
      0.196349546313286, 0.193281576037407, 0.190213620662689, 0.18714565038681,
      0.184077695012093, 0.181009739637375, 0.177941769361496, 0.174873813986778,
      0.171805843710899, 0.168737888336182, 0.165669918060303, 0.162601962685585,
      0.159534007310867, 0.156466037034988, 0.153398081660271, 0.150330111384392,
      0.147262156009674, 0.144194200634956, 0.141126230359077, 0.13805827498436,
      0.134990304708481, 0.131922349333763, 0.128854379057884, 0.125786423683167,
      0.122718460857868, 0.11965049803257, 0.116582542657852, 0.113514579832554,
      0.110446617007256, 0.107378654181957, 0.104310691356659, 0.101242728531361,
      0.0981747731566429, 0.0951068103313446, 0.0920388475060463, 0.088970884680748,
      0.0859029218554497, 0.0828349590301514, 0.0797670036554337, 0.0766990408301353,
      0.073631078004837, 0.0705631151795387, 0.0674951523542404, 0.0644271895289421,
      0.0613592304289341, 0.0582912713289261, 0.0552233085036278, 0.0521553456783295,
      0.0490873865783215, 0.0460194237530231, 0.0429514609277248, 0.0398835018277168,
      0.0368155390024185, 0.0337475761771202, 0.030679615214467, 0.0276116542518139,
      0.0245436932891607, 0.0214757304638624, 0.0184077695012093, 0.0153398076072335,
      0.0122718466445804, 0.00920388475060463, 0.00613592332229018, 0.00306796166114509
  );

  TABLE_BUILDTORADSIN: array[0..BUILDTORADSIZE - 1] of single = (
      1.74845560007457E-7, -0.00306779061829546, -0.0061357272067735, -0.00920360604312275,
      -0.0122713982511354, -0.0153390749554192, -0.0184066072816687, -0.0214739663569378,
      -0.0245411233099109, -0.0276080492711748, -0.0306747153734908, -0.0337410927520658,
      -0.0368071525448243, -0.0398728658926803, -0.0429382039398085, -0.0460031378339162,
      -0.0490676387265145, -0.0521316777731905, -0.0551952261338781, -0.0582582549731298,
      -0.0613207354603882, -0.0643826387702571, -0.067443936082773, -0.0705045985836762,
      -0.0735645974646823, -0.076623903923753, -0.0796824891653676, -0.0827403244007935,
      -0.0857973808483578, -0.0888536297337176, -0.0919090422901314, -0.0949635897587294,
      -0.0980172433887845, -0.101069974437983, -0.104121754172694, -0.107172553868242,
      -0.110222344809175, -0.113271098289537, -0.116318785613136, -0.119365378093816,
      -0.122410847055725, -0.125455163833587, -0.12849829977297, -0.131540226230558,
      -0.134580914574418, -0.137620336184271, -0.140658462451761, -0.143695264780723,
      -0.146730242911342, -0.149764311841749, -0.152796971125422, -0.155828192217653,
      -0.158857946587273, -0.16188620571692, -0.164912941103302, -0.167938124257472,
      -0.170961726705092, -0.173983719986704, -0.177004075657995, -0.180022765290064,
      -0.183039760469696, -0.18605503279962, -0.189068553898785, -0.192080295402621,
      -0.19509022896331, -0.198098326250049, -0.201104558949321, -0.204108898765159,
      -0.207111317419411, -0.210111786652009, -0.213110278221235, -0.216106763903983,
      -0.219101215496028, -0.222093604812293, -0.22508390368711, -0.228072083974487,
      -0.231058117548373, -0.234041976302924, -0.237023632152767, -0.24000305703326,
      -0.242980222900764, -0.2459551017329, -0.248927665528818, -0.251897886309456,
      -0.254865736117806, -0.257831187019177, -0.260794211101457, -0.263754780475378,
      -0.266712867274774, -0.269668443656849, -0.272621481802433, -0.275571953916251,
      -0.278519832227176, -0.281465088988498, -0.284407696478182, -0.287347626999128,
      -0.290284852879434, -0.293219346472653, -0.296151080158059, -0.2990800263409,
      -0.302006157452664, -0.304929445951333, -0.307849864321648, -0.310766931848284,
      -0.313681527981184, -0.316593171607334, -0.319501835321077, -0.322407491744809,
      -0.325310113529229, -0.328209673353601, -0.331106143926009, -0.333999497983614,
      -0.33688970829291, -0.339776747649985, -0.342660588880769, -0.345541204841296,
      -0.348418568417959, -0.351292652527762, -0.354163430118577, -0.3570308741694,
      -0.3598949576906, -0.362755653724182, -0.365612935344031, -0.368466775656172,
      -0.371317147799021, -0.374164024943637, -0.377007380293977, -0.379847187087146,
      -0.382683418593649, -0.385516048117642, -0.388345048997188, -0.391170394604501,
      -0.393992058346202, -0.396810013663567, -0.399624234032775, -0.402434692965164,
      -0.405241364007473, -0.408044220742095, -0.410843236787327, -0.413638385797613,
      -0.416429641463798, -0.41921697751337, -0.422000367710713, -0.42477978585735,
      -0.42755520579219, -0.430326601391775, -0.433093946570527, -0.435857215280991,
      -0.438616381514082, -0.441371419299329, -0.444122302705121, -0.446869005838948,
      -0.449611502847648, -0.452349767917648, -0.455083775275208, -0.457813499186664,
      -0.460538913958669, -0.463259993938435, -0.465976291609845, -0.468688625893889,
      -0.471396548677068, -0.474100034471235, -0.476799057830009, -0.47949359334901,
      -0.4821836156661, -0.48486909946162, -0.48755001945863, -0.490226350423148,
      -0.492898067164385, -0.495565144534982, -0.498227557431249, -0.5008852807934,
      -0.503538289605787, -0.506186558897142, -0.508830063740802, -0.511468779254952,
      -0.514102680602857, -0.516731742993093, -0.519355941679782, -0.521975251962828,
      -0.524589649188145, -0.527199108747891, -0.529803606080699, -0.53240311667191,
      -0.534997616053801, -0.537587079805817, -0.540171483554801, -0.542750802975222,
      -0.545325013789407, -0.547894091767765, -0.550458012729019, -0.553016752540431,
      -0.555570287118032, -0.558118592426844, -0.560661644481112, -0.563199419344526,
      -0.565731893130446, -0.56825904200213, -0.570780842172954, -0.573297269906642,
      -0.575808301517482, -0.578313913370554, -0.580814081881952, -0.583308783519004,
      -0.585797994800495, -0.588281692296887, -0.590759852630542, -0.593232452475937,
      -0.595699468559889, -0.598160877661773, -0.600616656613736, -0.60306678230092,
      -0.605510852177072, -0.607949603090788, -0.610382631718848, -0.612809915160532,
      -0.615231430569194, -0.617647155152479, -0.620057066172537, -0.622461140946242,
      -0.624859356845395, -0.627251691296949, -0.629638121783213, -0.632018625842065,
      -0.63439318106717, -0.636761765108181, -0.639124355670957, -0.641480930517771,
      -0.643831467467515, -0.646175944395916, -0.648514339235739, -0.650846629976997,
      -0.653172794667155, -0.655492811411342, -0.657806658372553, -0.660114313771855,
      -0.662415755888594, -0.664710963060597, -0.666999913684378, -0.669282586215339,
      -0.671558959167976, -0.673829011116078, -0.676092720692929, -0.678350066591513,
      -0.68060102756471, -0.682845582425498, -0.685083710047151, -0.68731538936344,
      -0.689540599368832, -0.691759319118682, -0.693971527729437, -0.69617720437883,
      -0.698376328306073, -0.700568878812058, -0.702754835259547, -0.704934177073369,
      -0.707106883740612, -0.709272934810817, -0.711432309896172, -0.7135849886717,
      -0.715730950875454, -0.717870176308707, -0.720002644836138, -0.722128336386029,
      -0.724247230950447, -0.726359308585437, -0.728464549411207, -0.730562608006188,
      -0.73265411690202, -0.734738729739163, -0.736816426896336, -0.73888718881735,
      -0.740950996011296, -0.743007829052723, -0.745057668581826, -0.747100495304626,
      -0.749136289993149, -0.751165033485614, -0.753186706686604, -0.755201290567253,
      -0.757208766165425, -0.759209114585885, -0.761202317000488, -0.763188354648345,
      -0.765167208836008, -0.767138860937642, -0.769103292395202, -0.771060484718606,
      -0.773010419485909, -0.774953078343479, -0.776888443006167, -0.778816495257481,
      -0.780737216949755, -0.782650590004323, -0.784556596411687, -0.786455218231686,
      -0.788346437593669, -0.790230236696657, -0.792106597809514, -0.793975503271116,
      -0.795836935490512, -0.797690876947095, -0.799537310190762, -0.801376217842081,
      -0.803207582592456, -0.805031387204286, -0.806847614511131, -0.808656247417869,
      -0.810457268900863, -0.812250662008117, -0.814036409859436, -0.815814495646585,
      -0.817584902633449, -0.81934761415619, -0.8211026136234, -0.822849884516262,
      -0.824589410388705, -0.826321174867554, -0.828045161652692, -0.829761354517206,
      -0.831469737307543, -0.833170293943662, -0.834862745940373, -0.836547603545312,
      -0.838224587200952, -0.839893681122794, -0.841554869600601, -0.843208136998547,
      -0.84485346775536, -0.846490846384474, -0.848120257474168, -0.84974168568772,
      -0.851355115763542, -0.852960532515329, -0.854557920832203, -0.85614726567885,
      -0.857728552095668, -0.8593017651989, -0.860866890180784, -0.862423912309682,
      -0.863972816930226, -0.865513589463454, -0.867046215406945, -0.868570680334959,
      -0.870086969898569, -0.871595069825799, -0.873094965921759, -0.874586644068775,
      -0.876070090226525, -0.877545290432169, -0.879012230800481, -0.880470897523984,
      -0.881921276873071, -0.883363355196143, -0.884797118919732, -0.886222554548632,
      -0.887639648666023, -0.8890483879336, -0.890448759091698, -0.891840748959415,
      -0.893224344434739, -0.894599532494666, -0.895966300195331, -0.897324634672123,
      -0.898674523139807, -0.900015952892647, -0.901348911304524, -0.902673385829054,
      -0.903989363999707, -0.905296833429927, -0.906595781813243, -0.907886196923389,
      -0.909168066614417, -0.910441378820813, -0.91170612155761, -0.9129622829205,
      -0.914209851085947, -0.915448622415504, -0.916678970379229, -0.917900690162435,
      -0.919113770265764, -0.920318199271179, -0.921513965842073, -0.92270105872337,
      -0.923879466741638, -0.925049178805187, -0.926210183904181, -0.927362471110734,
      -0.928506029579021, -0.92964084854537, -0.930766917328375, -0.931884225328986,
      -0.932992762030616, -0.934092516999234, -0.935183479883472, -0.936265640414711,
      -0.937338988407186, -0.938403513758082, -0.939459206447622, -0.94050605653917,
      -0.941544054179316, -0.942573189597977, -0.943593453108482, -0.94460483510767,
      -0.945607326075974, -0.946600916577512, -0.947585597260181, -0.948561358855737,
      -0.949528192179888, -0.950486088132381, -0.951435037697082, -0.952375031942065,
      -0.953306062019698, -0.954228119166719, -0.955141194704328, -0.95604528003826,
      -0.956940366658873, -0.957826446141221, -0.958703510145141, -0.959571550415324,
      -0.960430558781399, -0.961280527158007, -0.962121447544875, -0.962953312026896,
      -0.963776112774201, -0.96458984204223, -0.965394492171812, -0.966190055589229,
      -0.966976524806294, -0.967753892420416, -0.968522151114674, -0.969281293657883,
      -0.97003119704269, -0.97077208735316, -0.971503840335205, -0.972226449101248,
      -0.972939906849782, -0.973644206865431, -0.974339342519019, -0.975025307267628,
      -0.975702094654658, -0.976369698309893, -0.977028111949558, -0.977677329376378,
      -0.978317344479636, -0.978948151235232, -0.979569743705739, -0.980182116040459,
      -0.980785262475477, -0.981379177333718, -0.981963855024997, -0.982539290046073,
      -0.983105476980702, -0.983662410499688, -0.984210085360929, -0.984748496409472,
      -0.98527763857756, -0.985797506884674, -0.986308096437591, -0.986809402430418,
      -0.987301420144646, -0.987784144949192, -0.988257572300439, -0.988721697742283,
      -0.989176516906175, -0.989622025511159, -0.990058219363914, -0.990485094358794,
      -0.990902646477868, -0.991310871790952, -0.991709766455653, -0.992099326717402,
      -0.992479548909487, -0.992850429453093, -0.99321196485733, -0.993564151719271,
      -0.99390698672398, -0.994240466644544, -0.994564588342107, -0.994879348765893,
      -0.995184744953242, -0.995480774029631, -0.995767433208707, -0.996044719792308,
      -0.996312631170494, -0.996571164821565, -0.996820280316543, -0.99706005275983,
      -0.997290440440946, -0.997511441191383, -0.997723052930984, -0.99792527366797,
      -0.998118101498949, -0.998301534608944, -0.998475571271402, -0.998640209848214,
      -0.99879544878973, -0.998941286634775, -0.999077722010658, -0.999204753633192,
      -0.999322380306699, -0.999430600924026, -0.999529414466554, -0.999618820004206,
      -0.999698816695459, -0.999769403787349, -0.99983058061548, -0.999882346604029,
      -0.999924701265752, -0.999957644201988, -0.999981175102665, -0.999995293746299,
      -1, -0.99999529381947, -0.999981175249005, -0.999957644421496,
      -0.999924701558426, -0.999882346969867, -0.999830581054477, -0.999769404299502,
      -0.999698817280763, -0.999618820662656, -0.999529415198143, -0.999430601728748,
      -0.999322381184545, -0.999204754584155, -0.999077723034729, -0.998941287731943,
      -0.998795449959986, -0.998640211091546, -0.998475572587799, -0.998301535998394,
      -0.998118102961438, -0.997925275203484, -0.99772305453951, -0.997511442872905,
      -0.997290442195449, -0.997060054587296, -0.996820282216956, -0.996571127341269,
      -0.99631259230539, -0.996044721911439, -0.995767435400709, -0.995480776294483,
      -0.995184747290923, -0.994879351176381, -0.994564590825379, -0.994240469200577,
      -0.993906989352749, -0.993564154420752, -0.993211967631498, -0.992850432299921,
      -0.992479551828949, -0.99209932970947, -0.9917097695203, -0.991310874928148,
      -0.990902649687583, -0.990485097640999, -0.990058222718577, -0.989622028938249,
      -0.98917652040566, -0.98872170131413, -0.988257575944614, -0.987784148665661,
      -0.987301423933375, -0.986809406291369, -0.986308100370729, -0.985797510889963,
      -0.98527764265496, -0.984748500558947, -0.984210089582438, -0.983662414793192,
      -0.983105481346161, -0.982539294483445, -0.981963859534241, -0.981379181914791,
      -0.980785267128337, -0.980182120765061, -0.979569748502038, -0.978948156103184,
      -0.978317349419195, -0.977677334387498, -0.977028117032191, -0.976369703463992,
      -0.975702099880173, -0.975025312564511, -0.974339347887221, -0.9736442123049,
      -0.972939912360467, -0.972226454683098, -0.971503845988166, -0.97077209307718,
      -0.970031202837714, -0.96928118224335, -0.968522038353606, -0.967753778313876,
      -0.966976530884774, -0.966190061738434, -0.965394498391685, -0.964589848332712,
      -0.963776119135232, -0.962953318458417, -0.962121454046825, -0.961280533730325,
      -0.960430565424024, -0.959571557128192, -0.958703516928189, -0.957826452994387,
      -0.95694037358209, -0.956045287031465, -0.955141201767454, -0.9542281262997,
      -0.953306069222465, -0.952375039214553, -0.951435045039221, -0.950486095544102,
      -0.949528199661122, -0.948561366406412, -0.947585604880227, -0.946600924266858,
      -0.945607333834546, -0.944604842935397, -0.943593461005289, -0.942573197563789,
      -0.941544062214059, -0.940506064642768, -0.939459214619999, -0.938403521999161,
      -0.93733899671689, -0.93626564879296, -0.935183488330189, -0.934092525514339,
      -0.932992770614028, -0.931884233980626, -0.93076692604816, -0.929640857333219,
      -0.92850603843485, -0.927362480034461, -0.92621019289572, -0.925049187864456,
      -0.92387947586855, -0.92270106791784, -0.921513975104013, -0.920318208600504,
      -0.919113779662384, -0.917900699626262, -0.916678979910175, -0.915448632013479,
      -0.914209667516742, -0.912962098081637, -0.911705935450828, -0.910441388685983,
      -0.909168076546158, -0.907886206921607, -0.906595791877845, -0.905296843560817,
      -0.90398937419679, -0.902673396092234, -0.901348921633704, -0.900015963287731,
      -0.898674533600696, -0.897324645198719, -0.895966310787536, -0.894599543152379,
      -0.893224355157859, -0.891840759747843, -0.890448769945331, -0.889048398852337,
      -0.88763965964976, -0.886222565597266, -0.884797130033159, -0.883363366374258,
      -0.88192128811577, -0.88047090883116, -0.879012242172029, -0.87754530186798,
      -0.876070101726492, -0.874586655632791, -0.873094977549714, -0.871595081517584,
      -0.870086981654073, -0.868570692154073, -0.867046227289557, -0.865513601409452,
      -0.863972828939498, -0.862423924382114, -0.860866902316263, -0.859301777397312,
      -0.857728564356897, -0.856147278002782, -0.854557933218721, -0.852960544964318,
      -0.851355128274883, -0.849741698261296, -0.848120270109861, -0.846490859082164,
      -0.844853480514929, -0.843208149819874, -0.841554882483565, -0.839893694067274,
      -0.838224600206826, -0.836547616612458, -0.834862759068668, -0.833170043434067,
      -0.831469485641228, -0.829761101696541, -0.828045175024332, -0.82632118829972,
      -0.824589423881269, -0.822849898069098, -0.82110262723638, -0.819347627829187,
      -0.817584916366334, -0.815814509439228, -0.814036423711707, -0.812250675919886,
      -0.810457282872, -0.808656261448241, -0.806847628600606, -0.805031401352733,
      -0.80320759679974, -0.80137623210807, -0.79953732451532, -0.797690891330088,
      -0.795836949931805, -0.793975517770572, -0.792106612366997, -0.79023025131203,
      -0.788346452266795, -0.786455232962427, -0.784556611199903, -0.782650604849875,
      -0.780737231852504, -0.778816510217287, -0.776888458022889, -0.774953093416975,
      -0.773010434616038, -0.771060499905225, -0.769103307638169, -0.767138876236812,
      -0.765167224191238, -0.76318837005949, -0.761202332467403, -0.759209130108425,
      -0.757208781743443, -0.755201306200603, -0.753186722375138, -0.75116520661271,
      -0.749136463723841, -0.747100669637277, -0.745057843514797, -0.743008004584367,
      -0.74095117213996, -0.738887365541377, -0.736816604214062, -0.73473890764892,
      -0.732654295402133, -0.730562787094976, -0.728464402413634, -0.726359161109015,
      -0.724247082996564, -0.722128187956078, -0.720002495931516, -0.717870026930815,
      -0.715730801025699, -0.713584838351492, -0.711432159106925, -0.709272783553952,
      -0.707106732017551, -0.704934024885541, -0.702754682608385, -0.700568725698998,
      -0.698376174732557, -0.696177050346302, -0.693971544901323, -0.691759336341265,
      -0.68954061664195, -0.687315406686931, -0.685083727420851, -0.682845599849244,
      -0.680601045038339, -0.678350084114859, -0.676092738265828, -0.673829028738363,
      -0.671558976839483, -0.669282603935901, -0.666999931453828, -0.664710980878768,
      -0.662415773755318, -0.660114331686964, -0.657806676335878, -0.655492829422715,
      -0.653172812726406, -0.650846648083955, -0.648514357390235, -0.646175962597779,
      -0.643831485716573, -0.641480948813852, -0.63912437401389, -0.636761783497792,
      -0.634393199503286, -0.632018644324514, -0.629638325536464, -0.627251895555868,
      -0.624859561608058, -0.622461346210722, -0.620057271936903, -0.617647361414792,
      -0.615231637327514, -0.612810122412914, -0.61038283946334, -0.607949811325434,
      -0.605511060899913, -0.603066611141355, -0.600616485057984, -0.598160705711448,
      -0.595699296216611, -0.593232279741327, -0.590759679506226, -0.588281518784495,
      -0.58579782090166, -0.583308609235363, -0.580813907215145, -0.578313738322225,
      -0.575808126089278, -0.573297094100215, -0.570780665989959, -0.568258865444225,
      -0.565731716199293, -0.563199439052084, -0.560661664229787, -0.55811861221645,
      -0.555570306948382, -0.553016772411339, -0.550458032640298, -0.547894111719228,
      -0.545325033780865, -0.542750823006488, -0.540171503625685, -0.537587099916131,
      -0.534997636203356, -0.532403136860517, -0.529803626308167, -0.527199129014029,
      -0.524589669492764, -0.521975272305735, -0.519355962060786, -0.516731763412002,
      -0.51410270105948, -0.511468799749096, -0.508830084272273, -0.506186579465748,
      -0.503538310211335, -0.500885301435694, -0.498227578110096, -0.495565165250187,
      -0.492898295360658, -0.490226579014948, -0.487550248443805, -0.484869328838014,
      -0.482183845431555, -0.479493823501364, -0.476799288367095, -0.474100265390883,
      -0.471396779977104, -0.468688857572137, -0.465976523664123, -0.463259803782727,
      -0.460538723498897, -0.45781330842462, -0.455083584212688, -0.45234957655645,
      -0.449611311189574, -0.446868813885801, -0.444122110458708, -0.44137122676146,
      -0.438616188686568, -0.435857022165648, -0.433093753169173, -0.43032640770623,
      -0.427555011824277, -0.424779591608895, -0.422000173183544, -0.419216782709318,
      -0.416429663147236, -0.413638407511419, -0.410843258531297, -0.408044242516025,
      -0.405241385811156, -0.402434714798396, -0.399624255895351, -0.39681003555528,
      -0.393992080266848, -0.391170416553872, -0.388345070975077, -0.385516070123843,
      -0.382683440627954, -0.379847209149349, -0.37700740238387, -0.374164047061012,
      -0.371317169943669, -0.368466797827885, -0.365612957542601, -0.362755675949399,
      -0.359894979942256, -0.357030896447284, -0.354163452422481, -0.351292674857475,
      -0.348418590773271, -0.345541227221997, -0.342660611286647, -0.339776994314952,
      -0.336889955230111, -0.333999745190724, -0.331106391400702, -0.328209921093548,
      -0.325310361532098, -0.322407740008265, -0.319502083842783, -0.316593420384951,
      -0.313681777012372, -0.310767181130697, -0.307849660173368, -0.30492924160136,
      -0.302005952902921, -0.299079821593312, -0.296150875214553, -0.293219141335159,
      -0.290284647549882, -0.287347421479451, -0.284407490770314, -0.281464883094376,
      -0.278519626148737, -0.275571747655435, -0.272621275361182, -0.269668237037105,
      -0.266712660478483, -0.263754573504486, -0.260794003957912, -0.257831210062576,
      -0.254865759179963, -0.251897909390153, -0.248927688627838, -0.245955124850026,
      -0.242980246035777, -0.240003080185943, -0.237023655322902, -0.234041999490294,
      -0.231058140752758, -0.228072107195669, -0.225083926924871, -0.222093628066415,
      -0.219101238766291, -0.216106787190167, -0.213110301523123, -0.210111809969381,
      -0.207111340752047, -0.204108922112839, -0.201104582311826, -0.198098349627159,
      -0.195090252354804, -0.192080318808281, -0.189068577318389, -0.186055056232948,
      -0.183039783916527, -0.180022788750179, -0.177004333785143, -0.17398397825506,
      -0.170961985112226, -0.16793838280095, -0.164913199780691, -0.161886464525786,
      -0.15885820552518, -0.155828451282163, -0.152797230314097, -0.14976457115215,
      -0.146730502341027, -0.143695052438701, -0.140658250016144, -0.13762012365706,
      -0.134580701957614, -0.131540013526161, -0.128498086982983, -0.125454950960012,
      -0.122410634100566, -0.119365165059077, -0.116318572500823, -0.113270885101656,
      -0.110222131547732, -0.107172340535244, -0.10412154077015, -0.101069760967901,
      -0.0980170298531738, -0.0949636135007072, -0.0919090660389459, -0.0888536534891454,
      -0.0857974046101752, -0.0827403481687769, -0.0796825129392933, -0.0766239277033972,
      -0.0735646212498212, -0.0705046223740859, -0.0674439598782296, -0.0643826625705366,
      -0.0613207592652666, -0.058258278782383, -0.055195249947282, -0.052131701590521,
      -0.0490676625475474, -0.0460031616584272, -0.0429382277675735, -0.039872889723475,
      -0.0368071763784243, -0.0337411165882468, -0.0306747392120285, -0.0276080731118448,
      -0.0245411471524887, -0.0214739902011991, -0.0184066311273891, -0.0153390988023741,
      -0.0122714220991005, -0.00920386830035431, -0.00613598947017643, -0.00306805288540122,
      -8.74227800037288E-8, 0.00306787804066407, 0.00613581462790786, 0.00920369346220001,
      0.0122714856673328, 0.0153391623679138, 0.0184066946896378, 0.0214740537595587,
      0.0245412107063609, 0.0276081366606314, 0.0306748027551313, 0.0337411801250678,
      0.0368072399083654, 0.0398729532459382, 0.042938291281961, 0.0460032251641411,
      0.0490677260439899, 0.0521317650770945, 0.055195313423389, 0.058258342247426,
      0.0613208227186482, 0.0643827260116596, 0.0674440233064968, 0.0705046857889004,
      0.0735644468780124, 0.0766237533718706, 0.0796823386496896, 0.0827401739227368,
      0.0857972304093386, 0.0888534793351521, 0.0919088919334351, 0.0949634394453175,
      0.0980170931200719, 0.101069824215384, 0.104121603997622, 0.107172403742111,
      0.110222194733399, 0.113270948265528, 0.116318635642306, 0.119365228177576,
      0.122410697195486, 0.12545501403076, 0.128498150028966, 0.131540076546785,
      0.134580764952286, 0.137620186625187, 0.140658312957133, 0.14369511535196,
      0.146730565225963, 0.149764634008172, 0.152797293140613, 0.155828514078582,
      0.15885803289991, 0.161886291986543, 0.164913027329099, 0.167938210438632,
      0.170961812840805, 0.173983806076158, 0.177004161700379, 0.180022851284569,
      0.183039846415512, 0.186055118695939, 0.189068639744797, 0.192080381197519,
      0.195090314706286, 0.198098411940297, 0.201104644586034, 0.20410898434753,
      0.207111402946636, 0.210111872123282, 0.213110363635751, 0.216106849260939,
      0.219101300794621, 0.222093690051719, 0.225083988866567, 0.228072169093173,
      0.231058202605487, 0.234042061297666, 0.237023717084336, 0.240002910450743,
      0.242980076430119, 0.245954955375505, 0.24892751928605, 0.251897740182692,
      0.254865590108421, 0.257831041128545, 0.260794065330953, 0.263754634826372,
      0.266712721748638, 0.269668298254953, 0.272621336526145, 0.275571808766938,
      0.278519687206205, 0.281464944097234, 0.284407551717989, 0.287347482371368,
      0.290284708385468, 0.293219202113842, 0.296150935935761, 0.299079882256473,
      0.302006013507463, 0.304929302146714, 0.307849720658964, 0.310767241555965,
      0.313681837376743, 0.316593480687858, 0.319501918161648, 0.322407574499297,
      0.325310196196855, 0.328209755933586, 0.331106226417576, 0.333999580385986,
      0.336889790605313, 0.339776829871643, 0.342660671010908, 0.345541286879144,
      0.348418650362744, 0.351292734378712, 0.354163511874921, 0.357030955830369,
      0.359895039255426, 0.362755735192096, 0.365613016714267, 0.368466856927964,
      0.371317228971604, 0.374164106016247, 0.377007461265851, 0.379847267957522,
      0.382683499361765, 0.385516128782739, 0.388345129558506, 0.391170475061282,
      0.393992138697688, 0.396810093909002, 0.399624095618086, 0.402434554736252,
      0.405241225965639, 0.408044082888639, 0.410843099123546, 0.413638248324803,
      0.416429504183252, 0.419216840426382, 0.422000230818572, 0.424779649161345,
      0.427555069293607, 0.4303264650919, 0.433093810470642, 0.435857079382377,
      0.438616245818018, 0.441371283807093, 0.444122167417988, 0.446868870758191,
      0.449611367974539, 0.452349633253456, 0.455083640821201, 0.457813364944107,
      0.460538779928826, 0.463259860122568, 0.465976579913344, 0.468688913730209,
      0.471396836043499, 0.474100111444455, 0.476799134675708, 0.479493670066465,
      0.482183692254589, 0.484869175920422, 0.487550095787026, 0.490226426620419,
      0.492898143229813, 0.495565220467852, 0.498227633230846, 0.50088535645901,
      0.503538365136699, 0.506186634292644, 0.508830139000185, 0.511468854377508,
      0.514102755587878, 0.516731817839873, 0.519356016387618, 0.521975326531016,
      0.524589723615983, 0.527199183034678, 0.529803680225737, 0.5324031906745,
      0.534997689913246, 0.537587153521423, 0.540171557125874, 0.542750876401069,
      0.545325087069337, 0.547893965452569, 0.55045788666823, 0.553016626735235,
      0.555570161569612, 0.558118467136383, 0.560661519449789, 0.563199294573518,
      0.565731768620927, 0.568258917755272, 0.570780718189928, 0.573297146188613,
      0.575808178065615, 0.578313790186012, 0.580813958965893, 0.583308660872586,
      0.585797872424871, 0.58828157019321, 0.59075973079996, 0.593232330919598,
      0.595699347278938, 0.59816075665735, 0.60061653588698, 0.603066661852969,
      0.605511111493665, 0.607949861800849, 0.610382889819943, 0.612810172650231,
      0.615231499488639, 0.617647223906588, 0.620057134760664, 0.62246120936774,
      0.624859425099621, 0.62725175938326, 0.629638189700968, 0.632018693590626,
      0.634393248645898, 0.63676183251644, 0.639124422908113, 0.641480997583191,
      0.643831534360568, 0.646176011115972, 0.64851440578217, 0.650846696349176,
      0.653172860864458, 0.655492877433146, 0.657806724218237, 0.660114379440799,
      0.662415821380179, 0.664711028374208, 0.666999978819399, 0.669282651171158,
      0.671559023943981, 0.673829075711658, 0.676092785107478, 0.678349955649025,
      0.680600916936989, 0.682845472113586, 0.685083600052086, 0.687315279686258,
      0.689540490010564, 0.691759210080359, 0.693971419012085, 0.696177095983472,
      0.698376220233729, 0.700568771063745, 0.70275472783628, 0.704934069976158,
      0.707106776970466, 0.709272828368741, 0.711432203783167, 0.713584882888766,
      0.715730845423586, 0.717870071188897, 0.720002540049376, 0.722128231933301,
      0.724247126832737, 0.726359204803724, 0.728464445966469, 0.730562830505526,
      0.73265433866999, 0.734738950773677, 0.736816647195313, 0.738887247725365,
      0.740951054720856, 0.743007887563276, 0.745057726892822, 0.747100553415515,
      0.749136347903386, 0.751165091194651, 0.7531867641939, 0.755201347872267,
      0.757208823267616, 0.759209171484717, 0.761202373695424, 0.763188411138852,
      0.765167265121554, 0.767138917017698, 0.76910334826924, 0.771060540386099,
      0.773010474946334, 0.774953133596314, 0.776888498050892, 0.778816550093577,
      0.780737271576707, 0.782650644421616, 0.784556650618809, 0.786455272228128,
      0.788346491378921, 0.790230290270213, 0.79210650564427, 0.793975411473248,
      0.795836844060886, 0.79769078588657, 0.799537219500196, 0.801376127522328,
      0.803207492644365, 0.805031297628704, 0.806847525308901, 0.808656158589831,
      0.810457180447853, 0.812250573930967, 0.814036322158976, 0.81581440832364,
      0.817584815688841, 0.819347527590737, 0.821102527437917, 0.822849798711561,
      0.824589324965592, 0.826321089826835, 0.828045076995166, 0.82976127024367,
      0.83146965341879, 0.833170210440483, 0.834862925302366, 0.836547782071874,
      0.838224764890402, 0.839893857973459, 0.841554916823904, 0.843208183995914,
      0.84485351452635, 0.846490892928645, 0.848120303791083, 0.849741731776942,
      0.851355161624638, 0.852960578147867, 0.854557966235754, 0.856147310852986,
      0.857728597039964, 0.859301809912934, 0.860866934664133, 0.862423956561929,
      0.863972860950954, 0.865513633252249, 0.867046258963394, 0.868570723658652,
      0.870087012989099, 0.871595112682761, 0.873095008544748, 0.874586686457391,
      0.876070132380368, 0.877545332350842, 0.879012272483592, 0.880470938971138,
      0.881921318083879, 0.883363284426094, 0.884797048559235, 0.886222484598348,
      0.887639579126611, 0.889048318805714, 0.890448690375989, 0.89184068065653,
      0.893224276545319, 0.894599465019353, 0.895966233134758, 0.897324568026922,
      0.898674456910605, 0.900015887080068, 0.901348845909186, 0.902673320851574,
      0.903989299440697, 0.905296769289994, 0.90659571809299, 0.907886133623416,
      0.90916800373532, 0.910441316363184, 0.911706010545715, 0.912962172664913,
      0.914209741587706, 0.915448705571433, 0.916679052954427, 0.917900772156125,
      0.919113851677174, 0.920318280099543, 0.92151404608663, 0.922701138383365,
      0.92387954581632, 0.925049257293813, 0.926210261806012, 0.927362503821205,
      0.92850606204061, 0.929640880757772, 0.930766949291286, 0.931884257042106,
      0.932992793493645, 0.934092548211878, 0.935183510845435, 0.936265671125703,
      0.937339018866918, 0.938403543966267, 0.939459236403975, 0.940506086243409,
      0.941544083631162, 0.942573178981292, 0.943593442583768, 0.944604824675024,
      0.945607315735495, 0.946600906329297, 0.947585587104326, 0.948561348792339,
      0.949528182209041, 0.950486078254179, 0.951435027911617, 0.952375022249431,
      0.953306052419984, 0.954228109660017, 0.955141185290727, 0.956045235763402,
      0.956940322827111, 0.957826402752968, 0.958703467200804, 0.959571507915309,
      0.960430516726106, 0.961280485547831, 0.962121406380208, 0.962953271308125,
      0.963776072501709, 0.964589802216398, 0.965394452793013, 0.966190016657834,
      0.966976455940315, 0.967753824356365, 0.968522083853192, 0.969281227199604,
      0.970031247250213, 0.970772136945505, 0.971503889311906, 0.972226497461843,
      0.972939954593815, 0.973644253992455, 0.974339389028589, 0.975025353159306,
      0.975702139928012, 0.976369742964498, 0.977028130580263, 0.977677347744946,
      0.978317362585895, 0.978948169079011, 0.979569761286871, 0.980182133358777,
      0.98078527953082, 0.981379194125924, 0.981963871553908, 0.982539306311534,
      0.983105492982559, 0.983662426237791, 0.98421010083513, 0.984748511619625,
      0.985277633143277, 0.985797501546501, 0.986308091195578, 0.986809397284614,
      0.9873014150951, 0.987784139995951, 0.98825756744355, 0.988721692981792,
      0.989176512242126, 0.989622020943596, 0.990058214892881, 0.990485089984333,
      0.990902642200019, 0.991310867609756, 0.991709747052982, 0.992099307774231,
      0.992479530425996, 0.992850411429454, 0.993211947293714, 0.993564134615843,
      0.993906970080901, 0.994240450461971, 0.994564572620192, 0.994879333504784,
      0.995184730153082, 0.995480759690561, 0.99576741933086, 0.996044695783647,
      0.996312607987647, 0.99657114246475, 0.996820296781518, 0.997060068592803,
      0.997290455641769, 0.997511455759911, 0.997723066867082, 0.997925286971505,
      0.998118114169797, 0.998301546646985, 0.998475582676523, 0.998640220620307,
      0.998795458928695, 0.998941290656509, 0.999077725764448, 0.999204757119002,
      0.999322383524495, 0.999430603873779, 0.999529417148235, 0.999618822417791,
      0.999698818840925, 0.999769405664676, 0.999830582224649, 0.999882347945026,
      0.999924702338564, 0.999957645006606, 0.99998117563908, 0.999995293648779,
      0.999999999999999, 0.999995293916989, 0.999981175444043, 0.999957644714052,
      0.999924701948496, 0.999882347457447, 0.999830581639564, 0.999769404982089,
      0.999698818060844, 0.999618821540224, 0.99952941617319, 0.999430602801264,
      0.999322386742284, 0.999204760604803, 0.99907772951823, 0.998941294678236,
      0.998795457369006, 0.998640218963223, 0.998475580922059, 0.998301544795159,
      0.998118112220625, 0.997925284925006, 0.997723064723275, 0.997511453518816,
      0.997290453303407, 0.997060066157197, 0.996820303747577, 0.996571149698133,
      0.996312615488287, 0.996044703551473, 0.995767416409396, 0.995480756672003,
      0.99518472703746, 0.994879330292126, 0.994564569310528, 0.994240447055334,
      0.993906966577321, 0.993564131015354, 0.99321194359635, 0.992850407635249,
      0.992479541127476, 0.992099318741855, 0.991709758286645, 0.991310863428559,
      0.990902637922169, 0.99048508560987, 0.990058210421847, 0.989622016376033,
      0.989176507578077, 0.9887216882213, 0.98825756258666, 0.98778413504271,
      0.987301410045553, 0.986809411437171, 0.98630810561274, 0.985797516228134,
      0.985277648089241, 0.984748506089286, 0.984210095208784, 0.983662420515492,
      0.983105487164361, 0.98253930039749, 0.981963865544075, 0.981379188020358,
      0.980785273329579, 0.980182127061919, 0.979569754894455, 0.978948186922783,
      0.978317380692147, 0.977677366113508, 0.977028149210961, 0.976369736095218,
      0.975702132963549, 0.975025346099725, 0.974339381873958, 0.973644246742839,
      0.972939947249285, 0.972226490022466, 0.971503881777752, 0.970772129316646,
      0.97003123952672, 0.969281248701677, 0.968522105615135, 0.967753846377974,
      0.966976478221381, 0.966190008462285, 0.965394444503279, 0.964589793832558,
      0.963776064023842, 0.962953262736311, 0.962121397714526, 0.961280476788364,
      0.960430507872936, 0.95957149896852, 0.95870345816048, 0.957826427873681,
      0.956940348204604, 0.956045261397437, 0.955141175877125, 0.954228100153315,
      0.95330604282027, 0.952375012556795, 0.951435018126152, 0.950486068375976,
      0.949528172238193, 0.94856133872894, 0.947585576948471, 0.946600896081081,
      0.945607344175024, 0.944604853368041, 0.943593471530002, 0.942573208180471,
      0.941544072922611, 0.940506075443089, 0.939459225511988, 0.938403532982714,
      0.937339007791904, 0.936265659959332, 0.935183499587812, 0.934092536863109,
      0.932992782053837, 0.931884245511366, 0.93076698125419, 0.929640912970166,
      0.928506094502191, 0.927362536531669, 0.926210249822263, 0.925049245219797,
      0.92387953365215, 0.922701126129156, 0.921514033742497, 0.920318267665602,
      0.919113839153542, 0.91790075954292, 0.916679040251768, 0.915448692779439,
      0.914209777015028, 0.912962208337268, 0.911706046462768, 0.910441303215067,
      0.909167990498479, 0.907886120297975, 0.906595704679075, 0.90529675578773,
      0.903989285850213, 0.902673307172997, 0.901348832142645, 0.900015873225692,
      0.898674442968525, 0.897324606612824, 0.895966271961151, 0.894599504085869,
      0.893224315851593, 0.89184072020219, 0.890448730160664, 0.889048358829029,
      0.887639619388188, 0.88622252509781, 0.8847970892962, 0.88336332540018,
      0.881921246904957, 0.880470867384001, 0.879012200488914, 0.877545317109412,
      0.876070117053431, 0.874586671045091, 0.873094993047232, 0.871595097100173,
      0.870086997321587, 0.868570707906363, 0.867046243126476, 0.865513617330851,
      0.863972844945226, 0.862423940472022, 0.860866918490199, 0.859301793655123,
      0.857728580698431, 0.856147356027116, 0.854558011639298, 0.852960623780399,
      0.851355207485727, 0.849741777866158, 0.848120350107991, 0.846490939472809,
      0.844853561297333, 0.843208230993275, 0.841554964047201, 0.839893808370844,
      0.838224715052526, 0.836547731999208, 0.83486287499538, 0.83317015989965,
      0.831469602644587, 0.829761219236574, 0.828045059173692, 0.826321071924694,
      0.824589306982953, 0.822849780648592, 0.821102509294789, 0.819347509367621,
      0.817584797385908, 0.815814424411251, 0.814036338316137, 0.812250590157527,
      0.810457196743658, 0.808656174954727, 0.806847541742735, 0.805031314131321,
      0.803207544722056, 0.801376179815202, 0.799537272007761, 0.797690838608332,
      0.795836896996348, 0.793975464621913, 0.792106595387287, 0.790230234264797,
      0.7883464351522, 0.786455215780631, 0.784556593951068, 0.782650587534163,
      0.780737214470078, 0.778816530155432, 0.776888478036891, 0.774953113506645,
      0.773010454781186, 0.771060520145662, 0.769103327953705, 0.767138896627256,
      0.765167283031747, 0.763188429114263, 0.761202391735885, 0.759209189590058,
      0.757208841437667, 0.755201366106856, 0.753186782492856, 0.751165148903683,
      0.749136405813616, 0.747100611526399, 0.745057785203812, 0.743007946073824,
      0.740951113430411, 0.738887306633374, 0.736816585406425, 0.734738888778487,
      0.732654276469082, 0.730562768099486, 0.728464383355884, 0.726359141989184,
      0.724247063814832, 0.72212820994469, 0.720002517990446, 0.717870049059856,
      0.715730823224643, 0.713584860620129, 0.711432181445047, 0.709272805961347,
      0.707106796640857, 0.704934089706805, 0.702754747626997, 0.700568790914346,
      0.698376240144027, 0.696177115953278, 0.693971481956707, 0.691759273210815,
      0.68954055332626, 0.687315343186597, 0.685083663736471, 0.682845535981418,
      0.680600980987667, 0.678350063675795, 0.676092717768965, 0.673829008183896,
      0.671558956227605, 0.669282583266806, 0.66699991072771, 0.664710960095822,
      0.662415797567749, 0.660114355563882, 0.657806700277058, 0.655492853427931,
      0.653172836795432, 0.650846672216566, 0.648514381586203, 0.646176032346451,
      0.643831555646094, 0.641481018923565, 0.639124444303134, 0.636761853965907,
      0.634393270149608, 0.632018715148377, 0.629638257618718, 0.627251827469566,
      0.624859493353842, 0.622461277789233, 0.620057203348786, 0.617647292660692,
      0.615231568408079, 0.612810100430183, 0.610382817428412, 0.607949789238517,
      0.605511038761214, 0.603066588951084, 0.600616462816348, 0.598160683418657,
      0.595699321747775, 0.593232305330463, 0.590759705153093, 0.588281544488853,
      0.585797846663266, 0.583308635053974, 0.580813981610866, 0.578313812880447,
      0.5758082008093, 0.573297168981333, 0.570780741031469, 0.568258940645419,
      0.565731791559464, 0.563199366812803, 0.56066159183979, 0.558118539676419,
      0.555570234258999, 0.553016699573289, 0.550457959654266, 0.547894038585901,
      0.545325010463018, 0.542750799642209, 0.540171480215195, 0.537587076459651,
      0.534997612701106, 0.532403113312717, 0.52980360271504, 0.527199156024354,
      0.524589696554374, 0.521975299418376, 0.519355989224202, 0.516731790625938,
      0.514102728323679, 0.511468827063302, 0.508830162947898, 0.50618665828367,
      0.503538389170813, 0.500885380535985, 0.498227657350456, 0.49556524462987,
      0.492898167434011, 0.490226502817685, 0.487550172115417, 0.48486925237922,
      0.482183768843074, 0.479493746783916, 0.476799237718009, 0.474100214657748,
      0.471396729160398, 0.468688832998616, 0.465976499050718, 0.463259779129669,
      0.460538698806418, 0.457813310188659, 0.455083585979505, 0.452349578326029,
      0.449611339582057, 0.446868842321997, 0.444122138938348, 0.441371282026633,
      0.43861624403488, 0.435857077596577, 0.433093808682197, 0.430326490202588,
      0.427555094440904, 0.424779674345013, 0.422000283057032, 0.419216892739196,
      0.416429556569929, 0.413638300784848, 0.410843178827423, 0.408044162702334,
      0.405241305888399, 0.402434662049823, 0.399624203075885, 0.396809982665418,
      0.393992027307087, 0.391170390952334, 0.388345045340275, 0.385516044456019,
      0.382683442461104, 0.37984721098482, 0.377007404221645, 0.37416407653863,
      0.371317199457637, 0.368466827377925, 0.365612987128434, 0.362755733343063,
      0.359895037404193, 0.357030953976954, 0.354163537889983, 0.351292760423877,
      0.348418676437767, 0.345541312983781, 0.342660725142979, 0.339776884064034,
      0.336889844857514, 0.333999662788357, 0.331106308909141, 0.328209838513568,
      0.325310278864477, 0.322407685464688, 0.319502029242468, 0.316593365728412,
      0.313681750598269, 0.310767154689947, 0.30784963370622, 0.304929243491051,
      0.302005954794458, 0.29907982348668, 0.296150877109732, 0.293219171724501,
      0.290284677967675, 0.287347451925409, 0.284407549815742, 0.281464942193265,
      0.278519685300531, 0.275571806859578, 0.272621363290569, 0.269668325042517,
      0.266712748559092, 0.263754690406478, 0.260794120957423, 0.257831096800856,
      0.254865645826048, 0.251897824786423, 0.248927603956945, 0.245955054556182,
      0.242980175687541, 0.240003024249609, 0.237023599344403, 0.234041957957462,
      0.231058113687383, 0.228072080110702, 0.225083914339355, 0.222093615472038,
      0.219101240702267, 0.21610680367651, 0.213110318020583, 0.210111841046332,
      0.207111371849341, 0.204108967817649, 0.201104628045657, 0.198098409995432,
      0.195090327375064, 0.192080393873969, 0.189068667061201, 0.18605514602835,
      0.183039888413087, 0.180022907963648, 0.177004218411015, 0.173983877491714,
      0.170961884294735, 0.167938296619792, 0.164913113554896, 0.161886392960771,
      0.158858148636421, 0.155828394365589, 0.152797188096429, 0.149764528914655,
      0.146730474823981, 0.143695039655779, 0.140658237227588, 0.137620125622368,
      0.13458070392375, 0.13154003026479, 0.128498103728347, 0.125454982495386,
      0.122410673042575, 0.119365211412951, 0.116318633671587, 0.11327095369674,
      0.11022220757167, 0.107172423992358, 0.104121631664554, 0.1010698593035,
      0.0980171430483673, 0.0949634968053744, 0.0919089567290547, 0.0888535515699264,
      0.0857973100866498, 0.0827402610457572, 0.0796824406482717, 0.0766238628236635,
      0.0735645637854888, 0.0705045723290589, 0.0674439172562022, 0.0643826273749933,
      0.0613207352177617, 0.0582582658873479, 0.0551952444892216, 0.05213170357201,
      0.0490676756917536, 0.0460031822472452, 0.0429382558029127, 0.0398729289293622,
      0.0368072230344588, 0.0337411706956721, 0.0306748026336465, 0.0276081458488115,
      0.0245412292056971, 0.0214740797090636, 0.0184067299523785, 0.0153392060133972,
      0.0122715386271894, 0.00920375480534961, 0.00613588481989888, 0.00306795684833938
  );

  TABLE_BUILDTORADCOS: array[0..BUILDTORADSIZE - 1] of single = (
      0.999999999999985, 0.999995294319289, 0.999981176248655, 0.999957645920967,
      0.999924703557704, 0.999882349468932, 0.999830584053308, 0.999769407798069,
      0.999698821279033, 0.999618825160591, 0.999529420195702, 0.999430607225883,
      0.999322387181205, 0.999204761080282, 0.999077730030263, 0.998941295226818,
      0.998795457954132, 0.998640219584887, 0.998475581580256, 0.998301545489881,
      0.998118112951868, 0.997925285692761, 0.997723065527535, 0.997511454359575,
      0.997290454180656, 0.997060067070928, 0.996820295198894, 0.996571140821392,
      0.996312606283571, 0.99604469401887, 0.995767406548995, 0.995480746483896,
      0.995184716521744, 0.9948793194489, 0.994564558139893, 0.994240435557395,
      0.993906954752188, 0.993564118863137, 0.993211931117164, 0.992850394829211,
      0.992479513402216, 0.992099290327076, 0.991709729182615, 0.991310833635552,
      0.990902607440465, 0.990485054439757, 0.990058178563617, 0.989621983829986,
      0.989176544311064, 0.988721725713847, 0.988257600838413, 0.987784174053309,
      0.987301449814632, 0.986809432665993, 0.986308127238471, 0.985797538250569,
      0.985277670508174, 0.984748528904506, 0.984210118420075, 0.983662444122636,
      0.983105511167136, 0.982539324795671, 0.981963890337431, 0.981379213208657,
      0.980785298912582, 0.980182153039387, 0.979569781266143, 0.978948189356758,
      0.978317383161925, 0.977677368619066, 0.977028151752276, 0.976369738672266,
      0.975702135576305, 0.975025348748165, 0.974339384558056, 0.973644249462572,
      0.972939950004625, 0.972226492813388, 0.97150388460423, 0.970772132178654,
      0.97003124242423, 0.969281222314535, 0.968522078909083, 0.967753819353263,
      0.966976450878267, 0.966189980801024, 0.965394416524132, 0.964589765535787,
      0.963776035409715, 0.962953233805097, 0.962121368466497, 0.961280447223795,
      0.960430477992106, 0.95957146877171, 0.958703427647974, 0.957826362791279,
      0.956940282456939, 0.956045194985127, 0.955141108800796, 0.954228032413598,
      0.953305974417803, 0.952374943492222, 0.951434948400122, 0.950486146174474,
      0.949528250766342, 0.948561417985999, 0.947585656933696, 0.946600976793718,
      0.945607386834303, 0.944604896407552, 0.943593514949339, 0.942573251979226,
      0.941544117100371, 0.940506119999439, 0.939459270446508, 0.938403578294981,
      0.937339053481492, 0.93626570602581, 0.935183546030748, 0.934092583682064,
      0.932992829248372, 0.931884293081036, 0.93076698561408, 0.929640917364089,
      0.928506098930104, 0.92736254099353, 0.926210254318031, 0.92504924974943,
      0.923879538215604, 0.922701130726388, 0.921514038373465, 0.920318272330262,
      0.91911384385185, 0.917900764274832, 0.916679045017239, 0.915448697578425,
      0.914209733538953, 0.91296216456049, 0.911706002385699, 0.910441258838122,
      0.909167945822076, 0.907886075322534, 0.90659565940502, 0.905296710215487,
      0.90398923998021, 0.902673261005667, 0.901348785678422, 0.900015826465013,
      0.898674395911831, 0.897324506645002, 0.895966171370271, 0.894599402872878,
      0.893224214017443, 0.891840617747841, 0.890448627087079, 0.889048255137179,
      0.887639515079049, 0.886222420172363, 0.884797205950345, 0.88336344273334,
      0.881921364916027, 0.880470986071871, 0.879012319852467, 0.877545379987413,
      0.876070180284186, 0.874586734628006, 0.873095056981706, 0.871595161385606,
      0.870087061957373, 0.868570772891894, 0.867046308461141, 0.865513683014034,
      0.86397291097631, 0.862424006850384, 0.860866985215214, 0.859301860726165,
      0.857728648114867, 0.85614736218908, 0.854558017832556, 0.852960630004892,
      0.851355213741396, 0.849741784152944, 0.848120356425836, 0.846490945821653,
      0.844853567677115, 0.843208237403937, 0.841554970488682, 0.839893782492615,
      0.838224689051559, 0.836547705875747, 0.834862848749673, 0.833170133531943,
      0.831469576155128, 0.829761192625612, 0.828044999023444, 0.826321011502182,
      0.824589246288746, 0.822849719683261, 0.821102448058909, 0.819347447861767,
      0.81758473561066, 0.815814327897001, 0.814036241384636, 0.812250492809687,
      0.810457098980396, 0.808656076776963, 0.806847443151393, 0.80503121512733,
      0.803207409799901, 0.801376044335553, 0.799537135971893, 0.797690702017527,
      0.795837048582055, 0.793975616818145, 0.792106711810961, 0.790230351151448,
      0.788346552500728, 0.786455333589931, 0.784556712220032, 0.782650706261678,
      0.780737333655026, 0.778816612409569, 0.77688856060397, 0.77495319638589,
      0.773010537971816, 0.771060603646895, 0.769103411764753, 0.767138980747332,
      0.765167329084708, 0.763188475334924, 0.76120243812381, 0.75920923614481,
      0.757208888158808, 0.755201412993948, 0.753186829545456, 0.751165156775468,
      0.749136413712845, 0.747100619452998, 0.745057793157707, 0.743007954054939,
      0.740951121438671, 0.738887314668704, 0.736816553170484, 0.734738856434917,
      0.732654244018187, 0.730562735541571, 0.728464350691255, 0.726359109218149,
      0.724247030937699, 0.722128135729704, 0.720002443538125, 0.7178699743709,
      0.715730748299755, 0.713584785460015, 0.711432106050413, 0.709272730332904,
      0.707106678632469, 0.704933971336926, 0.702754628896742, 0.700568671824832,
      0.698376120696375, 0.696176996148613, 0.693971318880663, 0.691759109653315,
      0.689540389288843, 0.687315178670809, 0.685083498743859, 0.68284571887301,
      0.680601164402854, 0.678350203819001, 0.67609285830847, 0.673829149118375,
      0.671559097555732, 0.669282724987251, 0.667000052839139, 0.664711102596897,
      0.66241589580512, 0.660114454067291, 0.657806799045577, 0.655492952460631,
      0.653172936091381, 0.650846771774829, 0.648514481405843, 0.646176086936953,
      0.643831610378143, 0.641481073796645, 0.639124499316729, 0.636761909119499,
      0.634393325442678, 0.632018770580404, 0.62963826688302, 0.62725183675686,
      0.62485950266404, 0.622461287122248, 0.620057212704529, 0.617647302039077,
      0.615231577809016, 0.612810062752192, 0.610382779660957, 0.607949751381953,
      0.605511000815898, 0.603066550917371, 0.600616424694598, 0.598160645209229,
      0.595699235576127, 0.59323221896315, 0.590759618590927, 0.588281457732649,
      0.58579775971384, 0.583308547912145, 0.580813845757107, 0.578313676729946,
      0.575808064363337, 0.573297032241193, 0.570780603998438, 0.568258803320788,
      0.565731653944526, 0.563199179656278, 0.560661404292793, 0.558118351740715,
      0.555570045936357, 0.553016510865482, 0.550458168656711, 0.547894248010139,
      0.545325170344992, 0.542750959842544, 0.540171640732384, 0.537587237292181,
      0.534997773847464, 0.532403274771388, 0.529803764484503, 0.527199267454529,
      0.524589808196124, 0.521975411270652, 0.519356101285951, 0.516731902896103,
      0.514102840801205, 0.51146893974713, 0.508830224525299, 0.506186719972445,
      0.50353845097038, 0.500885442445763, 0.498227719369861, 0.495565306758319,
      0.49289822967092, 0.490226513211352, 0.48755018252697, 0.484869262808561,
      0.482183779290105, 0.479493757248539, 0.476799222003519, 0.474100198917181,
      0.471396713393901, 0.46868879088006, 0.4659764568638, 0.463259736874787,
      0.460538656483969, 0.457813241303336, 0.455083516985679, 0.452349509224348,
      0.449611243753013, 0.446868746345417, 0.444122042815136, 0.441371159015336,
      0.438616120838531, 0.435856954216335, 0.433093685119225, 0.430326339556287,
      0.42755494357498, 0.424779523260887, 0.422000104737468, 0.419216714165819,
      0.416429377744418, 0.413638121708888, 0.410842972331742, 0.40804395592214,
      0.405241098825639, 0.402434863943913, 0.399624405241317, 0.39681018510029,
      0.393992230009493, 0.391170566492744, 0.388345221108764, 0.385516220450932,
      0.38268359114703, 0.379847359858995, 0.377007553282668, 0.374164198147541,
      0.371317321216507, 0.368466949285609, 0.365613109183784, 0.362755827772615,
      0.359895131946076, 0.357031048630277, 0.354163604783214, 0.351292827394514,
      0.348418743485181, 0.34554138010734, 0.342660764343984, 0.339776923308721,
      0.336889884145514, 0.333999674028429, 0.33110632016138, 0.328209849777868,
      0.325310290140732, 0.322407668541885, 0.319502012302062, 0.316593348770562,
      0.313681705324989, 0.310767109370994, 0.307849588342022, 0.304929169699047,
      0.302005880930316, 0.299079749551095, 0.2961508031034, 0.293219069155749,
      0.290284575302895, 0.287347349165567, 0.284407418390214, 0.28146481064874,
      0.278519553638248, 0.275571675080775, 0.272621202723035, 0.269668164336154,
      0.266712587715412, 0.263754500679979, 0.260793931072656, 0.257830906759609,
      0.25486545563011, 0.251897605596271, 0.248927384592787, 0.245954820576667,
      0.242980404073922, 0.240003238344795, 0.237023813600971, 0.234042157886091,
      0.231058299264792, 0.228072265822448, 0.225084085664902, 0.222093786918203,
      0.219101397728342, 0.216106946260985, 0.213110460701209, 0.210111969253239,
      0.207111500140176, 0.20410908160374, 0.201104741903997, 0.198098509319098,
      0.195090412145008, 0.192080478695246, 0.18906873730061, 0.186055216308919,
      0.183039944084742, 0.180022949009129, 0.177004259479349, 0.173983903908618,
      0.170961910725834, 0.167938308375309, 0.164913125316502, 0.161886390023749,
      0.158858130985997, 0.155828376706535, 0.152797155702727, 0.149764496505739,
      0.146730427660278, 0.143694977724317, 0.140658175268829, 0.137620048877517,
      0.134580627146546, 0.131539938684273, 0.128498012110979, 0.125454876058597,
      0.122410559170445, 0.119365090100956, 0.116318497515406, 0.11327081008965,
      0.110222056509842, 0.107172265472177, 0.104121465682612, 0.1010696858566,
      0.0980169547188161, 0.0949633010028927, 0.0919087534511443, 0.0888533408142987,
      0.0857970918512266, 0.0827400353286702, 0.0796826753419318, 0.0766240901450996,
      0.0735647837290584, 0.0705047848893287, 0.0674441224279482, 0.0643828251532012,
      0.0613209218793468, 0.0582584414263482, 0.0551954126196013, 0.0521318642896633,
      0.0490678252719813, 0.0460033244066211, 0.0429383905379955, 0.039873052514593,
      0.0368073391887061, 0.0337412794161599, 0.0306749020560403, 0.0276082359704226,
      0.0245413100240996, 0.0214741530843101, 0.0184067940204669, 0.0153392617038857,
      0.0122715850075125, 0.00920379280565256, 0.00613591397369814, 0.00306797738785699,
      1.19248804548121E-8, -0.00306795353820832, -0.0061358901243862, -0.00920376895690183,
      -0.0122715611595475, -0.0153392378569308, -0.0184067701747466, -0.0214741292400488,
      -0.0245412861815219, -0.0276082121297528, -0.0306748782175028, -0.033741255579979,
      -0.0368073153551063, -0.0398730286837985, -0.0429383667102307, -0.0460033005821102,
      -0.0490678014509486, -0.052131840472333, -0.0551953888061976, -0.0582584176170952,
      -0.0613208980744687, -0.064382801352922, -0.067444098632492, -0.0705047610989193,
      -0.0735647599439199, -0.0766240663654557, -0.0796826515680064, -0.0827404867628399,
      -0.0857975431682835, -0.0888533170588703, -0.091908729702329, -0.0949632772609142,
      -0.0980169309838979, -0.101069662128965, -0.104121441962485, -0.10717224175978,
      -0.110222032805398, -0.113270786393382, -0.116318473827539, -0.11936506642171,
      -0.122410535500045, -0.125454852397265, -0.128497988458938, -0.131539915041746,
      -0.134580603513754, -0.137620025254684, -0.140658151656177, -0.143694954122068,
      -0.146730404068654, -0.149764472924963, -0.15279713213302, -0.15582835314812,
      -0.158858107439094, -0.161886366488581, -0.16491310179329, -0.167938284864274,
      -0.170961887227198, -0.173983880422602, -0.177004236006174, -0.180022925549016,
      -0.183039920637911, -0.186055192875592, -0.189068713881007, -0.192080455289587,
      -0.195090388753514, -0.198098485941989, -0.201104718541493, -0.20410905825606,
      -0.207111476807541, -0.210111945935868, -0.213110437399322, -0.216106922974801,
      -0.21910137445808, -0.222093763664083, -0.225084062427141, -0.228072242601266,
      -0.231058276060408, -0.234042134698722, -0.237023790430836, -0.240003215192112,
      -0.24298038093891, -0.245955259648853, -0.24892782332109, -0.251898043976562,
      -0.254865432567951, -0.257830883716207, -0.260793908048228, -0.263754477674742,
      -0.266712564729582, -0.269668141369947, -0.272621179776668, -0.275571652154464,
      -0.278519530732208, -0.281464787763188, -0.284407395525364, -0.287347326321635,
      -0.290284552480096, -0.293219046354298, -0.296150780323511, -0.299079726792982,
      -0.302005858194195, -0.30492914698513, -0.307849565650524, -0.310767086702128,
      -0.313681682678968, -0.3165933261476, -0.319501989702372, -0.322407645965679,
      -0.325310267588223, -0.328209827249269, -0.331106297656901, -0.333999651548284,
      -0.336889861689913, -0.339776900877876, -0.342660741938107, -0.34554135772664,
      -0.34841872112987, -0.351292805064802, -0.354163582479311, -0.357031026352393,
      -0.359895109694421, -0.362755805547399, -0.365613086985216, -0.368466927113897,
      -0.37131729907186, -0.374164176030168, -0.377007531192777, -0.379847337796793,
      -0.382683569112726, -0.385516198444732, -0.388345199130876, -0.391170544543374,
      -0.393992208088849, -0.396810163208578, -0.399624383378743, -0.402434842110682,
      -0.405241512951138, -0.408044369482506, -0.410843385323083, -0.413638099995079,
      -0.416429356060977, -0.41921669251295, -0.422000083115376, -0.424779501669774,
      -0.42755492201505, -0.430326318027742, -0.433093663622268, -0.43585693275117,
      -0.438616099405358, -0.441371137614358, -0.444122021446554, -0.446868725009432,
      -0.449611222449826, -0.45234948795416, -0.455083495748688, -0.457813220099744,
      -0.460538635313975, -0.463259715738591, -0.465976435761601, -0.468688769812055,
      -0.47139669236029, -0.47410017791816, -0.476799201039287, -0.479493736319294,
      -0.482183758396043, -0.484869241949878, -0.487550161703864, -0.490226492424018,
      -0.492898208919554, -0.495565286043116, -0.498227698691016, -0.50088542180347,
      -0.503538430364835, -0.50618669940384, -0.508830203993829, -0.511468919252989,
      -0.514102820344584, -0.516731882477196, -0.519356080904948, -0.521975390927747,
      -0.524589787891508, -0.527199247188393, -0.529803744257037, -0.532403254582783,
      -0.534997753697911, -0.537587217181869, -0.540171620661501, -0.542750939811281,
      -0.545325150353536, -0.547894228058679, -0.550458148745434, -0.553016888281068,
      -0.555570422581613, -0.558118727612094, -0.560661384544114, -0.563199159948716,
      -0.565731634278265, -0.568258783696015, -0.570780584415337, -0.573297012699948,
      -0.575808044864133, -0.578313657272965, -0.580813826342533, -0.583308528540161,
      -0.585797740384628, -0.58828143844639, -0.590759599347804, -0.593232199763343,
      -0.595699216419818, -0.598160626096597, -0.600616405625824, -0.603066531892634,
      -0.605510981835377, -0.607949732445827, -0.610382760769404, -0.61281004390539,
      -0.615231559007142, -0.617647283282308, -0.620057193993042, -0.622461268456218,
      -0.624859484043644, -0.627251818182273, -0.629638248354416, -0.632018752097958,
      -0.634393307006564, -0.63676189072989, -0.639124480973799, -0.641481055500566,
      -0.643831592129088, -0.646176068735093, -0.648514463251349, -0.650846753667873,
      -0.653172918032133, -0.655492934449261, -0.657806781082254, -0.660114257060461,
      -0.662415699330366, -0.664710906656068, -0.666999857434078, -0.669282530119798,
      -0.671558903227721, -0.673828955331636, -0.676092665064825, -0.678350011120271,
      -0.680600972250852, -0.682845527269544, -0.68508365504962, -0.687315334524851,
      -0.6895405446897, -0.691759264599522, -0.693971473370763, -0.696177150181153,
      -0.698376274269903, -0.700568824937904, -0.702754781547916, -0.704934123524765,
      -0.707106830355541, -0.709272881589781, -0.711432256839672, -0.713584935780235,
      -0.715730898149522, -0.717870123748804, -0.72000242698707, -0.722128119231409,
      -0.724247014492321, -0.726359092825841, -0.728464334352172, -0.730562719255867,
      -0.732654227786015, -0.73473884025643, -0.736816537045834, -0.738887298598043,
      -0.74095110542215, -0.743007938092709, -0.745057777249918, -0.7471006035998,
      -0.749136397914387, -0.751165141031899, -0.753186813856924, -0.755201397360601,
      -0.757208872580793, -0.759209220622274, -0.761202422656897, -0.763188459923782,
      -0.765167313729481, -0.767138965448165, -0.76910339652179, -0.771060588460279,
      -0.77301052284169, -0.774953181312396, -0.776888395469798, -0.778816447901282,
      -0.780737169774173, -0.782650543009801, -0.784556549598667, -0.78645517160061,
      -0.788346391144975, -0.790230190430782, -0.792106551726894, -0.793975457372185,
      -0.795836889775701, -0.797690831416835, -0.799537264845481, -0.801376172682207,
      -0.803207537618413, -0.805031342416498, -0.806847569910018, -0.808656203003852,
      -0.810457224674361, -0.812250617969545, -0.814036366009208, -0.815814451985115,
      -0.817584859161148, -0.819347570873466, -0.821102570530661, -0.822849841613914,
      -0.824589367677151, -0.82632099807001, -0.828044985651798, -0.829761179314617,
      -0.831469562904909, -0.833170120342625, -0.834862835621381, -0.836547692808604,
      -0.838224676045688, -0.839893769548138, -0.841554957605721, -0.843208224582614,
      -0.84485355491755, -0.846490933123966, -0.848120343790146, -0.849741771579371,
      -0.851355201230058, -0.852960617555907, -0.85455800544604, -0.856147349865152,
      -0.85772863585364, -0.859301848527756, -0.860866973079738, -0.862423994777955,
      -0.863972898967042, -0.865513671068039, -0.867046296578532, -0.868570761072784,
      -0.870086932685785, -0.871595032814725, -0.873094929112742, -0.874586607462162,
      -0.87607005382266, -0.877545254231395, -0.879012194803139, -0.880470861730412,
      -0.881921241283607, -0.883363319811121, -0.884797083739486, -0.886222519573492,
      -0.887639613896319, -0.88904835336966, -0.890448724733846, -0.891840714807975,
      -0.893224310490032, -0.894599498757012, -0.895966266665048, -0.897324601349525,
      -0.898674490025209, -0.90001591998636, -0.901348878606857, -0.902673353340316,
      -0.903989331720205, -0.905296801359963, -0.906595749953119, -0.907886165273405,
      -0.909167935890328, -0.910441248972945, -0.911705992587186, -0.912962154828733,
      -0.914209723874043, -0.915448687980453, -0.916679035486297, -0.917900754811007,
      -0.919113834455233, -0.920318263000942, -0.921514029111528, -0.922701121531923,
      -0.923879529088696, -0.925049240690165, -0.926210245326495, -0.927362532069808,
      -0.928506090074279, -0.929640908576244, -0.930766976894299, -0.9318842844294,
      -0.932992820664963, -0.934092575166963, -0.935183537584034, -0.936265697647564,
      -0.937339045171793, -0.938403570053906, -0.939459262274135, -0.940506030886723,
      -0.941544028744834, -0.9425731643817, -0.943593428110648, -0.944604810328513,
      -0.945607301515727, -0.946600892236408, -0.947585573138447, -0.948561334953601,
      -0.949528168497576, -0.950486064670114, -0.951435014455082, -0.952375008920551,
      -0.953306039218885, -0.954228096586824, -0.955141172345562, -0.956045257900834,
      -0.956940344742994, -0.957826424447097, -0.958703488672975, -0.959571529165319,
      -0.960430537753755, -0.961280506352922, -0.962121426962544, -0.962953291667514,
      -0.963776092637958, -0.964589822129317, -0.965394472482415, -0.966189974651811,
      -0.96697644479978, -0.967753813345559, -0.968522072972218, -0.969281216448564,
      -0.970031236629209, -0.970772126454638, -0.971503878951273, -0.972226487231543,
      -0.972939944493944, -0.973644244023107, -0.974339379189859, -0.975025343451285,
      -0.975702130350793, -0.976369733518171, -0.977028146669646, -0.97767736360795,
      -0.978317378222369, -0.978948184488809, -0.979569776469847, -0.980182148314789,
      -0.980785294259727, -0.981379208627587, -0.981963885828191, -0.982539320358302,
      -0.983105506801682, -0.983662439829136, -0.984210071997476, -0.98474848327405,
      -0.985277625670292, -0.985797494205682, -0.986308083986993, -0.986809390208333,
      -0.987301408151188, -0.987784133184474, -0.988257560764572, -0.988721686435375,
      -0.989176505828333, -0.989622014662487, -0.990058208744514, -0.990485083968767,
      -0.99090263631731, -0.99131086185996, -0.991709756754321, -0.992099317245819,
      -0.992479539667744, -0.992850420441276, -0.993211956075525, -0.99356414316756,
      -0.993906978402443, -0.99424045855326, -0.994564580481152, -0.994879341135342,
      -0.995184737553165, -0.995480744219037, -0.995767404356986, -0.996044691899731,
      -0.996312604237324, -0.996571138848055, -0.996820293298486, -0.997060065243466,
      -0.997290452426158, -0.997511452678057, -0.997723063919013, -0.99792528415725,
      -0.998118111489382, -0.998301544100436, -0.998475580263863, -0.998640218341559,
      -0.99879545678388, -0.998941294129654, -0.999077729006197, -0.999204760129324,
      -0.999322386303363, -0.999430606421165, -0.999529419464117, -0.999618824502145,
      -0.999698820693733, -0.99976940728592, -0.999830583614314, -0.999882349103099,
      -0.999924703265034, -0.999957643507119, -0.999981174639414, -0.999995293514671,
      -0.999999999999996, -0.999995294051091, -0.999981175712249, -0.999957645116359,
      -0.9999247024849, -0.999882348127944, -0.999830582444147, -0.999769405920751,
      -0.999698819133576, -0.999618822747015, -0.999529417514029, -0.999430604276139,
      -0.999322383963418, -0.999204757594482, -0.999077726276482, -0.998941291205092,
      -0.998795453664499, -0.998640215027387, -0.998475576754932, -0.998301540396779,
      -0.998118107591035, -0.997925280064248, -0.997723059631395, -0.997511448195863,
      -0.99729046528859, -0.997060078640804, -0.996820307230604, -0.996571153314822,
      -0.996312619238604, -0.996044707435383, -0.995767420426863, -0.995480760822988,
      -0.995184731321925, -0.99487933471003, -0.994564573861829, -0.994240451739989,
      -0.993906971395287, -0.993564135966586, -0.9932119486808, -0.99285041285287,
      -0.992479531885729, -0.992099309270267, -0.991709748585307, -0.991310853497563,
      -0.990902627761607, -0.990485075219838, -0.990058199802443, -0.989622005527356,
      -0.98917649650023, -0.988721676914387, -0.988257551050788, -0.987784123277987,
      -0.987301435926825, -0.986809418513447, -0.986308112821319, -0.985797523568948,
      -0.985277655562221, -0.984748513694361, -0.984210102945883, -0.983662428384542,
      -0.983105495165288, -0.982539308530219, -0.981963873808529, -0.981379196416459,
      -0.980785281857248, -0.980182135721077, -0.97956976368502, -0.978948171512986,
      -0.978317365055674, -0.977677350250505, -0.977028133121579, -0.976369719779608,
      -0.975702116421864, -0.975025329332121, -0.974339364880592, -0.973644229523872,
      -0.972939929804878, -0.972226472352784, -0.971503863882962, -0.970772168418096,
      -0.970031279113212, -0.969281259452711, -0.968522116496104, -0.967753857388775,
      -0.966976489361911, -0.966190019732439, -0.965394455902951, -0.96458980536164,
      -0.963776075682227, -0.962953274523888, -0.962121409631185, -0.961280488833992,
      -0.96043052004742, -0.959571511271745, -0.958703470592331, -0.957826406179552,
      -0.956940326288721, -0.956045239260006, -0.955141153518355, -0.954228077573415,
      -0.953306020019453, -0.952374989535276, -0.951434994884148, -0.950486044913704,
      -0.949528148555876, -0.9485613148268, -0.947585629001953, -0.946600948607955,
      -0.945607358394785, -0.944604867714546, -0.943593486003116, -0.942573222780058,
      -0.941544087648533, -0.940506090295207, -0.939459240490163, -0.938403548086805,
      -0.937339023021769, -0.936265675314826, -0.935183515068793, -0.934092552469429,
      -0.93299279778535, -0.931884261367924, -0.930766953651178, -0.929640885151695,
      -0.928506066468523, -0.927362508283068, -0.926210221358995, -0.925049216542129,
      -0.923879504760353, -0.9227010970235, -0.921514004423258, -0.920318238133055,
      -0.919113809407965, -0.917900729584594, -0.916679105358809, -0.915448758344362,
      -0.914209794728686, -0.912962226173443, -0.911706064421292, -0.910441321295771,
      -0.909168008701192, -0.907886138622526, -0.906595723125292, -0.90529677435544,
      -0.90398930453924, -0.902673325983165, -0.901348851073778, -0.900015892277611,
      -0.898674462141051, -0.897324573290222, -0.895966238430862, -0.894599470348211,
      -0.893224281906881, -0.891840686050745, -0.890448695802807, -0.889048324265084,
      -0.88763958461848, -0.886222490122666, -0.88479705411595, -0.883363290015154,
      -0.881921211315489, -0.880470944624725, -0.879012278169364, -0.877545338068747,
      -0.876070138130351, -0.874586692239398, -0.873095014358725, -0.871595118528652,
      -0.87008701886685, -0.868570729568208, -0.867046264904699, -0.865513639225247,
      -0.863972866955589, -0.862423962598144, -0.860866940731872, -0.859301816012139,
      -0.857728603170578, -0.856147317014952, -0.854557972429012, -0.852960584372361,
      -0.851355167880308, -0.849741738063729, -0.848120310108929, -0.846490899277489,
      -0.844853520906133, -0.843208190406577, -0.841554923265386, -0.839893735043827,
      -0.838224641377727, -0.836547788605444, -0.834862931866511, -0.83317021703514,
      -0.831469660043898, -0.829761276899166, -0.828045083680988, -0.826321096542919,
      -0.824589331711876, -0.82284980548798, -0.821102534244409, -0.819347534427237,
      -0.817584822555285, -0.815814415219963, -0.814036329085113, -0.812250580886854,
      -0.810457187433423, -0.808656165605018, -0.80684753235364, -0.805031304702929,
      -0.803207499748009, -0.801376134655323, -0.799537226662476, -0.797690793078068,
      -0.795836851281534, -0.793975418722978, -0.792106512923013, -0.790230151472591,
      -0.788346498715483, -0.786455279593497, -0.784556658012916, -0.782650651844392,
      -0.780737279028081, -0.778816557573479, -0.776888505559252, -0.774953141133061,
      -0.773010482511398, -0.771060547979408, -0.769103355890722, -0.767138924667282,
      -0.765167272799168, -0.763188418844423, -0.76120238142888, -0.759209179245986,
      -0.757208831056624, -0.755201355688941, -0.753186772038166, -0.751165099066437,
      -0.749136355802615, -0.747100561342115, -0.745057734846717, -0.743007895544392,
      -0.740951062729117, -0.738887255760696, -0.736816494064576, -0.734738958862919,
      -0.732654346786074, -0.730562838648377, -0.728464454136009, -0.726359212999877,
      -0.724247135055425, -0.722128240182447, -0.720002548324902, -0.717870079490725,
      -0.715730853751639, -0.713584891242965, -0.711432212163433, -0.709272836774995,
      -0.707106785402629, -0.704934078434152, -0.702754736320024, -0.70056877957316,
      -0.698376228768734, -0.696177104543986, -0.693971427598029, -0.691759218691652,
      -0.689540498647125, -0.687315288348005, -0.685083608738938, -0.68284548082546,
      -0.680600925673805, -0.678349964410699, -0.676092618223168, -0.673829084522801,
      -0.671559032779733, -0.669282660031438, -0.666999987704123, -0.664711037283293,
      -0.662415830313541, -0.660114388398353, -0.657806733199899, -0.655492886438832,
      -0.653172869894083, -0.650846705402655, -0.648514414859418, -0.646176020216903,
      -0.643831543485096, -0.641481006731231, -0.639124432079579, -0.636761841711245,
      -0.634393257863955, -0.632018702831849, -0.62963819896527, -0.627251768670554,
      -0.62485943440982, -0.622461218700755, -0.620057144116408, -0.617647233284973,
      -0.615231508889577, -0.612809993668066, -0.610382899265719, -0.607949871268911,
      -0.605511120983925, -0.603066671365336, -0.600616545421366, -0.598160766213664,
      -0.595699356857091, -0.5932323405195, -0.590759740421521, -0.588281579836338,
      -0.585797882089476, -0.583308670558577, -0.580813968673179, -0.578313799914501,
      -0.575808187815216, -0.573297155959234, -0.570780727981477, -0.568258927567658,
      -0.565731778454056, -0.563199304427298, -0.560661529324128, -0.558118477031187,
      -0.555570171484788, -0.55301663667069, -0.55045789662387, -0.547893975428302,
      -0.545324897216724, -0.542750686170417, -0.540171567161315, -0.53758716357658,
      -0.534997699988023, -0.532403200768802, -0.52980369033947, -0.527199193167747,
      -0.524589733768292, -0.521975336702469, -0.519356026578119, -0.516731828049327,
      -0.514102765816189, -0.511468864624579, -0.50883014926592, -0.506186644576947,
      -0.503538375439472, -0.500885366780157, -0.498227643570269, -0.495565230825454,
      -0.492898153605497, -0.490226437014086, -0.487550106198579, -0.484869186349763,
      -0.48218370270162, -0.479493680531088, -0.476799145157824, -0.474100121943965,
      -0.47139663629389, -0.468688924264211, -0.465976590464443, -0.463259870690665,
      -0.460538790513822, -0.457813375545902, -0.455083651439695, -0.45234964388855,
      -0.449611378626132, -0.446868881426183, -0.444122178102278, -0.441371294507581,
      -0.438616256534603, -0.435857090114959, -0.433093821219119, -0.430326475856171,
      -0.427555080073572, -0.424779659956901, -0.422000241629618, -0.419216851252816,
      -0.416429515024972, -0.413638259181707, -0.410843218679361, -0.408044202609179,
      -0.405241345849778, -0.402434674782861, -0.399624215826036, -0.396809995432562,
      -0.393992040091104, -0.391170376325481, -0.388345030694418, -0.385516029791294,
      -0.382683400243896, -0.379847168714161, -0.377007361897933, -0.374164117074934,
      -0.371317240043928, -0.36846686801382, -0.365613027813551, -0.362755746304704,
      -0.359895050381253, -0.357030966969311, -0.354163523026873, -0.351292745543568,
      -0.348418661540399, -0.345541298069495, -0.342660682213848, -0.339776841087066,
      -0.336889801833114, -0.333999703989541, -0.331106350154922, -0.328209879803559,
      -0.325310320198288, -0.322407698631024, -0.3195020424225, -0.316593378922016,
      -0.313681735507175, -0.310767139583629, -0.307849618584821, -0.304929199971725,
      -0.302005911232589, -0.299079779882676, -0.296150833464005, -0.293219213514567,
      -0.290284719796867, -0.287347493793333, -0.284407563150413, -0.28146495554001,
      -0.278519698659224, -0.275571820230093, -0.272621347999328, -0.269668309738055,
      -0.266712733241553, -0.26375464632899, -0.260794076843166, -0.257831052650246,
      -0.254865716912078, -0.251897867088288, -0.248927646292392, -0.245955082481396,
      -0.242980203634363, -0.240003037752144, -0.237023612857117, -0.234041956992922,
      -0.2310580982242, -0.228072064636326, -0.225083884335142, -0.222093585446701,
      -0.219101196116994, -0.216106744511689, -0.213110375286695, -0.210111883781968,
      -0.207111414612953, -0.20410899602137, -0.201104656267286, -0.198098423628852,
      -0.195090326402033, -0.192080392900349, -0.189068651454599, -0.186055130412602,
      -0.183039858138927, -0.180022863014626, -0.177004173436967, -0.173983817819166,
      -0.170961942044371, -0.167938339710371, -0.164913156667794, -0.161886421390976,
      -0.158858162368863, -0.155828408104745, -0.152797187115985, -0.149764527933751,
      -0.146730459102747, -0.143695009180947, -0.140658206739323, -0.13762008036158,
      -0.134580658643882, -0.131539970194585, -0.128498161854986, -0.125455025861426,
      -0.122410709030686, -0.119365240017198, -0.116318647486239, -0.113270960113661,
      -0.110222206585621, -0.10717241559831, -0.104121615857686, -0.101069836079201,
      -0.0980171049875308, -0.0949634513163066, -0.0919089038078425, -0.0888536099506473,
      -0.0857973610599663, -0.0827403046072671, -0.0796824693668926, -0.0766238841205158,
      -0.0735645776568692, -0.0705045787714737, -0.0674439162663675, -0.0643826189498352,
      -0.0613207156361365, -0.0582582351452348, -0.0551952063025264, -0.0521316579385688,
      -0.0490676188888096, -0.0460032370763966, -0.0429383031958434, -0.0398729651613355,
      -0.0368072518251654, -0.0337411920431582, -0.0306748146744001, -0.0276081485809663,
      -0.0245412226276498, -0.0214740656816893, -0.018406706612498, -0.0153391742913912,
      -0.0122714975913153, -0.00920370538657539, -0.00613582655256384, -0.00306800917421694,
      -4.37113900018644E-8, 0.00306792175184837, 0.00613585833847502, 0.00920373717173861,
      0.0122715293754314, 0.015339206074161, 0.0184067383936223, 0.0214740974608691,
      0.0245412544045858, 0.0276081803553596, 0.0306748464459515, 0.0337412238115686,
      0.0368071644616243, 0.0398728778080777, 0.042938215853691, 0.0460031497461717,
      0.049067650637031, 0.0521316896818557, 0.05519523804058, 0.0582582668777564,
      0.0613207473628274, 0.0643826506703969, 0.0674439479805013, 0.0705046104788811,
      0.0735646093572518, 0.0766239158135751, 0.0796823822220908, 0.0827402174842471,
      0.085797273959548, 0.0888535228736506, 0.0919089354598131, 0.0949634829591652,
      0.0980171366209797, 0.101069867702942, 0.104121647471422, 0.107172447201744,
      0.110222238178454, 0.113270991695597, 0.11631867905698, 0.119365271576447,
      0.122410622265366, 0.125454939129346, 0.128498075156962, 0.131540001704898,
      0.134580690141218, 0.137620111845644, 0.140658238209818, 0.143695040637576,
      0.146730490545215, 0.149764559361762, 0.152797218529244, 0.155828439502955,
      0.158858193751729, 0.161886335121354, 0.164913070441998, 0.167938253529212,
      0.17096185590866, 0.173983849120884, 0.17700420472157, 0.180022894281821,
      0.18303988938842, 0.186055161644097, 0.189068682667803, 0.192080424094968,
      0.195090357577774, 0.19809845478542, 0.20110468740439, 0.204108910438999,
      0.207111329085729, 0.210111798310695, 0.213110289872179, 0.216106775547075,
      0.21910122713116, 0.222093616439354, 0.22508391530599, 0.228072095585078,
      0.231058129150565, 0.234041987896609, 0.237023643737834, 0.240003068609602,
      0.242980234468271, 0.245954997744136, 0.248927561621498, 0.251897782484558,
      0.254865632376307, 0.257831083362054, 0.260794107529686, 0.263754676989933,
      0.26671276387663, 0.269668340346979, 0.272621378581809, 0.275571850785844,
      0.278519729187958, 0.281464986041438, 0.28440759362425, 0.287347410057485,
      0.290284636138482, 0.293219129934434, 0.296150863824609, 0.299079810214256,
      0.30200594153486, 0.304929230244402, 0.307849648827619, 0.310767169796264,
      0.313681765689362, 0.316593409073471, 0.319502072542939, 0.322407728720162,
      0.325310237530666, 0.328209797223578, 0.331106267663359, 0.333999621587172,
      0.336889831761514, 0.339776870982471, 0.342660712075977, 0.345541327898068,
      0.348418691335135, 0.351292775304185, 0.354163552753092, 0.357030996660852,
      0.359895080037837, 0.362755775926052, 0.365612946443316, 0.368466786742029,
      0.371317158871345, 0.374164036002325, 0.377007391338924, 0.379847198118248,
      0.382683429610802, 0.385516059120743, 0.388345059986133, 0.391170405579187,
      0.393992069306525, 0.396810024609423, 0.399624244964063, 0.40243470388178,
      0.405241265927019, 0.408044122795487, 0.410843138975485, 0.413638288121458,
      0.41642954392425, 0.419216880111347, 0.422000270447131, 0.424779688733125,
      0.427555108808236, 0.430326504549005, 0.433093849869852, 0.435857118723322,
      0.438616285100327, 0.441371216060971, 0.444122099774417, 0.446868803217809,
      0.449611300537981, 0.452349565921356, 0.455083573594194, 0.457813297822825,
      0.4605387129139, 0.46325979321463, 0.465976513113024, 0.468688847038135,
      0.471396769460298, 0.474100254891373, 0.47679927788498, 0.479493708425191,
      0.482183730548832, 0.484869214149821, 0.487550133951222, 0.490226464719052,
      0.492898181262526, 0.495565258434285, 0.498227671130643, 0.500885394291814,
      0.503538402902154, 0.506186671990394, 0.508830176629875, 0.511468891938784,
      0.514102793080387, 0.516731753202547, 0.519355951870284, 0.521975262134282,
      0.524589659340454, 0.52719911888096, 0.529803616194433, 0.532403126766213,
      0.534997626128578, 0.537587089860974, 0.540171493590243, 0.542750762929284,
      0.545324973823051, 0.547894051881367, 0.550457972922954, 0.553016712815075,
      0.555570247473757, 0.558118552864025, 0.56066155564479, 0.563199330693161,
      0.565731804664872, 0.56825895372318, 0.57078075408146, 0.573297182003432,
      0.575808213803384, 0.578313777220065, 0.580813946028206, 0.58330864796328,
      0.585797859544069, 0.588281557341032, 0.590759717976527, 0.593232318125031,
      0.595699286638457, 0.598160696155133, 0.600616475523597, 0.603066601628987,
      0.605511051409653, 0.607949801857371, 0.610382782804333, 0.612810065888122,
      0.61523158093747, 0.617647305160025, 0.620057215817944, 0.622461290228098,
      0.624859505762298, 0.627251793426414, 0.629638223659844, 0.632018727464904,
      0.63439328243526, 0.636761866220568, 0.63912445652669, 0.641481031115899,
      0.643831522199569, 0.646175998986424, 0.648514393684187, 0.650846684282871,
      0.653172848829945, 0.655492865430539, 0.657806712247647, 0.660114322729409,
      0.662415764821956, 0.664710971969683, 0.666999922569103, 0.66928259507562,
      0.67155896800373, 0.673829019927221, 0.676092685561689, 0.678350031559337,
      0.680600992631928, 0.682845547592438, 0.685083675314141, 0.687315354730808,
      0.689540564836903, 0.691759241645587, 0.693971450484397, 0.69617712736257,
      0.698376251519319, 0.700568802255532, 0.70275475893397, 0.704934100979459,
      0.707106765732237, 0.709272817165044, 0.711432192614107, 0.713584871754447,
      0.715730834324114, 0.717870060124376, 0.720002487655989, 0.722128179706931,
      0.724247074773875, 0.726359152912862, 0.728464394244093, 0.730562778952124,
      0.732654287286047, 0.734738859126864, 0.736816555853473, 0.73888731734271,
      0.740951124103668, 0.743007956710903, 0.745057795804612, 0.74710062209082,
      0.749136376858502, 0.751165120049168, 0.753186792947546, 0.755201376524771,
      0.757208851818709, 0.75920919993413, 0.761202402042889, 0.763188400869011,
      0.765167254888975, 0.767138906822477, 0.769103338111472, 0.771060530265881,
      0.77301046486376, 0.77495312355148, 0.776888450514528, 0.778816502737384,
      0.78073722440113, 0.782650597427099, 0.784556603805795, 0.786455225597057,
      0.788346444930232, 0.790230207478016, 0.792106568706606, 0.793975474284214,
      0.79583690661989, 0.797690848193023, 0.799537281553511, 0.801376189321922,
      0.803207518683211, 0.805031323559714, 0.806847551131829, 0.808656184304436,
      0.810457206053892, 0.812250599428199, 0.814036312927951, 0.815814399132351,
      0.817584806537375, 0.819347518479179, 0.821102518366353, 0.822849789680077,
      0.824589315974273, 0.826321047306468, 0.828045034666396, 0.829761228106895,
      0.831469611474407, 0.833170168688886, 0.834862883743949, 0.836547740707027,
      0.838224691215613, 0.839893784646453, 0.841554972632284, 0.843208239537284,
      0.844853569800186, 0.846490947934428, 0.848120358528295, 0.849741754821551,
      0.851355184555183, 0.852960600964134, 0.854557988937527, 0.856147333440052,
      0.85772861951211, 0.859301832269948, 0.860866926577166, 0.862423948516976,
      0.86397285294809, 0.86551362529155, 0.867046251044935, 0.868570715782508,
      0.870087005155343, 0.871595075671692, 0.873094971735737, 0.874586649850783,
      0.876070095976509, 0.877545296150074, 0.879012222276531, 0.880470889048285,
      0.881921268445704, 0.883363332849171, 0.884797096702084, 0.886222532460516,
      0.887639626707647, 0.889048352461273, 0.890448723830875, 0.891840713910429,
      0.893224296198457, 0.894599484552612, 0.895966252547955, 0.897324574165985,
      0.898674463011348, 0.900015893142433, 0.901348851933117, 0.902673314012285,
      0.903989292645455, 0.905296762538862, 0.906595698809444, 0.907886114467059,
      0.909167984706332, 0.910441297461744, 0.911706028504242, 0.912962190501092,
      0.914209759301368, 0.915448711168924, 0.916679058512828, 0.917900777675382,
      0.919113857157236, 0.920318273882573, 0.921514039914563, 0.92270113225626,
      0.923879528329381, 0.925049239936477, 0.926210244578442, 0.927362520176438,
      0.928506078271401, 0.92964089686397, 0.930766965272739, 0.9318842620877,
      0.932992798499449, 0.934092553177845, 0.935183505216624, 0.936265665542517,
      0.937339013329411, 0.938403538474491, 0.939459220745897, 0.940506070717109,
      0.941544068236787, 0.942573193580883, 0.943593457056886, 0.944604839021534,
      0.94560732995526, 0.946600910813688, 0.947585591548302, 0.948561353195857,
      0.949528177223618, 0.950486073315077, 0.951435023018885, 0.952375008315514,
      0.953306038619649, 0.954228095993393, 0.955141171757943, 0.95604524858042,
      0.956940335515858, 0.957826415313325, 0.958703471156648, 0.959571511830224,
      0.960430520600055, 0.961280489380778, 0.962121402047367, 0.962953267022218,
      0.963776068262776, 0.964589790163976, 0.965394440875876, 0.966190004876095,
      0.966976474676438, 0.96775383536717, 0.968522094734165, 0.969281234285625,
      0.970031254250528, 0.970772140283724, 0.971503892608683, 0.972226497229652,
      0.97293995092155, 0.973644250367647, 0.974339382097262, 0.975025346320063,
      0.975702129916056, 0.976369729869132, 0.977028143071204, 0.977677356929228,
      0.978317371639022, 0.978948174959438, 0.979569767080741, 0.980182136114142,
      0.980785279337272, 0.981379193935362, 0.981963868548991, 0.982539303354512,
      0.983105487345953, 0.983662418011541, 0.984210092746821, 0.984748501076772,
      0.985277643163791, 0.985797508887319, 0.98630809840416, 0.986809401948599,
      0.987301417304669, 0.987784142163379, 0.988257567291961, 0.988721692833212,
      0.989176509910101, 0.989622016518592, 0.990058210561393, 0.990485083695703,
      0.990902636050277, 0.991310859638861, 0.991709754584586, 0.992099313258044,
      0.992479534864706, 0.992850414868394, 0.993211948911598, 0.993564135347402,
      0.99390696997155, 0.994240449557149, 0.99456457096536, 0.994879331145426,
      0.995184726404418, 0.99548075535115, 0.995767414446253, 0.996044700991582,
      0.996312612377207, 0.996571146081443, 0.996820299077188, 0.997060070229462,
      0.997290456664983, 0.997511456215264, 0.997723066800171, 0.997925286427943,
      0.998118112966774, 0.998301544852956, 0.998475580565582, 0.99864021823812,
      0.998795456138147, 0.9989412931815, 0.999077727801298, 0.999204758564827,
      0.99932238458492, 0.999430604594479, 0.999529417517757, 0.99961882249325,
      0.999698818679443, 0.999769405363381, 0.999830581794966, 0.999882347458379,
      0.999924701834954, 0.99995764455175, 0.999981175281553, 0.999995293809314
  );

implementation

uses
  Windows, Math, se_DXTables, se_DirectX, se_DXDUtils, se_D3DUtils,
  se_MyD3DUtils, se_DXClasses;

resourceString
  rsKenSilverman = 'KenSilverman';
  rsExtMap = '.MAP';
  rsFmtDUKE3DLINKDESCRIPTION = '->%s::%d'; {eg '->C:\DUKE3D.GRP::1' }
  rsGRPExt = 'GRP';
  rsFmtDUKE3DLINKDESCRIPTION1 = '->';
  rsFmtDUKE3DLINKDESCRIPTION2 = '::';

var
  lastSkyTexture: string = '';

function GetDuke3DLinkDescription(const GRPFileName: string; Entry: integer): string;
// πχ  'C:\DUKE3D.GRP' & '1' δίνουν επιστρεφόμενη τιμή '->C:\DUKE3D.GRP::1'
begin
{$IFNDEF NO_DXTABLES}
  if Entry < MAX_INTTOSTR then
    Result := rsFmtDUKE3DLINKDESCRIPTION1 + GRPFileName + rsFmtDUKE3DLINKDESCRIPTION2 + TABLE_INTTOSTR[Entry]
  else {$ENDIF}
    Result := Format(rsFmtDUKE3DLINKDESCRIPTION, [GRPFileName, Entry]);
end;

function IsDuke3DLinkInfo(const inf: string): boolean;
var
  GRPFileName: string;
  Entry: integer;
begin
  Result := GetDuke3DLinkInfo(inf, GRPFileName, Entry);
  if Result then
    Result := UpperCase(RightStr(GRPFileName, 3)) = rsGRPExt;
end;

function GetDuke3DLinkInfo(const inf: string; var GRPFileName: string;
  var Entry: integer): boolean;
// Κάνει split το inf που είναι της μορφής πχ  '->C:\DUKE3D.GRP::1' στα 'C:\DUKE3D.GRP' & '1'
var
  sEntry: string;
  i, j: integer;
  code: integer;
begin
  Result := False;
  if Length(inf) >= length(rsFmtDUKE3DLINKDESCRIPTION1) + length(rsFmtDUKE3DLINKDESCRIPTION2) + 2 then
  begin
    if inf[1] + inf[2] = rsFmtDUKE3DLINKDESCRIPTION1 then
    begin
      sEntry := '';
      i := Length(inf);
      while (i > length(rsFmtDUKE3DLINKDESCRIPTION1)) and
           (inf[i] + inf[i - 1] <> rsFmtDUKE3DLINKDESCRIPTION2[length(rsFmtDUKE3DLINKDESCRIPTION2)-1] + rsFmtDUKE3DLINKDESCRIPTION2[length(rsFmtDUKE3DLINKDESCRIPTION2)]) do
      begin
        sEntry := inf[i] + sEntry;
        dec(i);
      end;
      if i > length(rsFmtDUKE3DLINKDESCRIPTION1) then
      begin
        GRPFileName := '';
        val(sEntry, entry, code);
        Result := code = 0;
        if Result then
          for j := length(rsFmtDUKE3DLINKDESCRIPTION1) + 1 to i - length(rsFmtDUKE3DLINKDESCRIPTION2) do
            GRPFileName := GRPFileName + inf[j];
      end;
    end;
  end;
end;

function GetDuke3DLinkInfo(const inf: string; var GRPFileName: string;
  var Entry: string): boolean; overload;
var
  iEntry: integer;
begin
  Result := GetDuke3DLinkInfo(inf, GRPFileName, iEntry);
  if Result then
{$IFNDEF NO_DXTABLES}
    if iEntry < MAX_INTTOSTR then
      Entry := TABLE_INTTOSTR[iEntry]
    else{$ENDIF}
      Entry := IntToStr(iEntry);
end;

const
  MAXCACHEDDUKE3DDIRENTRIES = 128;

type
  TDuke3DDirCacheItem = record
    FileName: string;
    FileTime: integer;
    numEntries: integer;
    DIR: PDuke3DDirectories;
  end;

  PDuke3DDirCacheItem = ^TDuke3DDirCacheItem;

  TDuke3DDirCache = array[0..MAXCACHEDDUKE3DDIRENTRIES - 1] of TDuke3DDirCacheItem;

var
  Duke3DDirCache: TDuke3DDirCache;
  numDuke3DDirCache: integer = 0;
  Duke3DDirCacheInitialized: boolean = False;

procedure InitDuke3DDIRCache;
var
  i: integer;
  pItem: PDuke3DDirCacheItem;
begin
  if not Duke3DDirCacheInitialized then
  begin
    numDuke3DDirCache := 0;
    pItem := @Duke3DDirCache[0];
    for i := 0 to MAXCACHEDDUKE3DDIRENTRIES - 1 do
    begin
      pItem.FileName := '';
      pItem.FileTime := -1;
      pItem.numEntries := -1;
      pItem.DIR := nil;
      inc(pItem);
    end;
    Duke3DDirCacheInitialized := True;
  end;
end;

function GetDuke3DDIRCache(const FileName: string;
  var DIR: PDuke3DDirectories; var numEntries: integer): boolean;
var
  i: integer;
  uFileName: string;
  FileTime: integer;
  pItem: PDuke3DDirCacheItem;
begin
  uFileName := UpperCase(ExpandFileName(FileName));
  FileTime := FileAge(uFileName);
  if FileTime > -1 then
  begin
    pItem := @Duke3DDirCache[numDuke3DDirCache];
    for i := numDuke3DDirCache - 1 downto 0 do
    begin
      dec(pItem);
      if (FileTime = pItem.FileTime) and (uFileName = pItem.FileName) then
      begin
        numEntries := pItem.numEntries;
        GetMem(DIR, numEntries * SizeOf(TDuke3DEntry));
        Move(pItem.DIR^, DIR^, numEntries * SizeOf(TDuke3DEntry));
        Result := True;
        Exit;
      end;
    end;
  end;
  Result := False;
end;

function GetDuke3DDIRCacheNoCopy(const FileName: string;
  var DIR: PDuke3DDirectories; var numEntries: integer): boolean;
var
  i: integer;
  uFileName: string;
  FileTime: integer;
  pItem: PDuke3DDirCacheItem;
begin
  uFileName := UpperCase(ExpandFileName(FileName));
  FileTime := FileAge(uFileName);
  if FileTime > -1 then
  begin
    pItem := @Duke3DDirCache[numDuke3DDirCache];
    for i := numDuke3DDirCache - 1 downto 0 do // More possibilities for last dir
    begin
      dec(pItem);
      if (FileTime = pItem.FileTime) and (uFileName = pItem.FileName) then
      begin
        numEntries := pItem.numEntries;
        DIR := pItem.DIR;
        Result := True;
        Exit;
      end;
    end;
  end;
  Result := False;
end;

procedure AddDuke3DDIRCacheDir(const FileName: string;
  const DIR: PDuke3DDirectories; const numEntries: integer);
var
  pItem: PDuke3DDirCacheItem;
  uFileName: string;
  idx: integer;
begin
  InitDuke3DDIRCache;
  if numDuke3DDirCache < MAXCACHEDDuke3DDIRENTRIES then
  begin
    pItem := @Duke3DDirCache[numDuke3DDirCache];
    inc(numDuke3DDirCache);
  end
  else
  begin
    idx := MAXCACHEDDUKE3DDIRENTRIES - 1 - random(MAXCACHEDDUKE3DDIRENTRIES div 4); // near end
    pItem := @Duke3DDirCache[idx]; // Add anyway!!
    FreeMem(pItem.DIR, pItem.numEntries * SizeOf(TDuke3DEntry));
  end;

  uFileName := UpperCase(ExpandFileName(FileName));
  pItem.FileName := uFileName;
  pItem.FileTime := FileAge(uFileName);
  pItem.numEntries := numEntries;
  GetMem(pItem.DIR, numEntries * SizeOf(TDuke3DEntry));
  Move(DIR^, pItem.DIR^, numEntries * SizeOf(TDuke3DEntry));
end;

procedure FreeDuke3DDIRCache;
var
  i: integer;
  pItem: PDuke3DDirCacheItem;
begin
  pItem := @Duke3DDirCache[0];
  for i := 0 to numDuke3DDirCache - 1 do
  begin
    pItem.FileName := '';
    pItem.FileTime := -1;
    FreeMem(pItem.DIR, pItem.numEntries * SizeOf(TDuke3DEntry));
    pItem.numEntries := -1;
    inc(pItem);
  end;
  numDuke3DDirCache := 0;
end;

function ReadDuke3DDirectory(const fName: TFileName; var DIR: PDuke3DDirectories): integer;
var
  f: TFileStream;
  Token: TDuke3DFileRec;
  i: integer;
  LastPos: integer;
  tmp: string;
begin
  if TrimStr(fName) = '' then
  begin
    DIR := nil;
    Result := -1;
    Exit;
  end;
  if GetDuke3DDIRCache(fName, DIR, Result) then
    Exit;

  f := TFileStream.Create(fName, fmOpenRead or fmShareDenyWrite);
  try
    f.Read(Token, SizeOf(Token));

    if TrimStr(Token.Name) <> rsKenSilverman then
    begin
      tmp := UpperCase(ExtractFileName(fName));
      if (length(tmp) <= 12) and (ExtractFileExt(tmp) = rsExtMap) then
      begin
        Result := 1;
        GetMem(DIR, SizeOf(TDuke3DEntry));
        DIR[0].Name := tmp;
        DIR[0].Size := f.size;
        DIR[0].Position := 0;
      end
      else
        Result := -1 // Invalid GRP file
    end
    else
    begin
      Result := Token.Size;

      GetMem(DIR, Result * SizeOf(TDuke3DEntry));

      LastPos := (Result + 1) * SizeOf(Token);
      for i := 0 to Result - 1 do
      begin
        f.Read(Token, SizeOf(Token));
        DIR[i].Name := TrimStr(UpperCase(Token.Name));
        DIR[i].Size := Token.Size;
        DIR[i].Position := LastPos;

        inc(LastPos, Token.Size);
      end;
    end;

    if Result > 1 then
      AddDuke3DDIRCacheDir(fName, DIR, Result);

  finally
    f.Free;
  end;
end;

function GetDuke3DMaps(
  const FileName: TFileName; const s: TStrings): integer;
{ Επιστρέφει στο stringlist s τους χάρτες του αρχείου Duke3D FileName}
{ Επιστρεφόμενη τιμή: ο αριθμός των χαρτών }
var
  DIR: PDuke3DDirectories;
  i, NumEntries: integer;
begin
  if UpperCase(ExtractFileExt(FileName)) = rsExtMap then
  begin
    s.Add(FileName);
    Result := 1;
  end
  else
  begin
    NumEntries := ReadDuke3DDirectory(FileName, DIR);
    if NumEntries > -1 then
    begin
      for i := 0 to NumEntries - 1 do
        if UpperCase(ExtractFileExt(DIR[i].Name)) = rsExtMap then
          s.Add(DIR[i].Name);
      Result := s.Count;
      FreeMem(DIR, NumEntries * SizeOf(TDuke3DEntry));
    end
    else
      Result := 0;
  end;
end;

function GetDuke3DLump(const FileName: TFileName; var Lump: TDuke3DEntry): boolean;
var
  DIR: PDuke3DDirectories;
  NumEntries: integer;
begin
  NumEntries := ReadDuke3DDirectory(FileName, DIR);
  if NumEntries > -1 then
  begin
    Result := GetDuke3DLump(DIR, NumEntries, Lump);
    FreeMem(DIR, NumEntries * SizeOf(TDuke3DEntry));
  end
  else
    Result := False;
end;

function GetDuke3DLump(const DIR: PDuke3DDirectories; const NumEntries: integer;
  var Lump: TDuke3DEntry): boolean;
var
  i: integer;
  uName: string;
begin
  uName := UpperCase(Lump.Name);
  for i := NumEntries - 1 downto 0 do
  begin
    if UpperCase(DIR[i].Name) = uName then
    begin
      Result := True;
      Lump.Size := DIR[i].Size;
      Lump.Position := DIR[i].Position;
      Exit;
    end;
  end;
  Result := False;
end;

function ReadDuke3DMapData(
  const FileName: TFileName; const MapName: string;
  var hSectors: PDuke3DSector7Array;
  var numSectors: integer;
  var hWalls: PDuke3DWall7Array;
  var numWalls: integer;
  var hSprites: PDuke3DSprite7Array;
  var numSprites: integer): boolean;
var
  DIR: PDuke3DDirectories;
  NumEntries: integer;
begin
  if UpperCase(ExpandFileName(FileName)) = UpperCase(ExpandFileName(MapName)) then
  begin
    Result := ReadDuke3DMapData(nil, -1, FileName, MapName,
      hSectors, numSectors,
      hWalls, numWalls,
      hSprites, numSprites);
  end
  else
  begin
    NumEntries := ReadDuke3DDirectory(FileName, DIR);
    if NumEntries > -1 then
    begin
      Result := ReadDuke3DMapData(DIR, numEntries, FileName, MapName,
        hSectors, numSectors,
        hWalls, numWalls,
        hSprites, numSprites);
      FreeMem(DIR, NumEntries * SizeOf(TDuke3DEntry));
    end
    else
      Result := False;
  end;
  if not Result then
  begin
    Result := False;
    hSectors := nil;
    numSectors := 0;
    hWalls := nil;
    numWalls := 0;
    hSprites := nil;
    numSprites := 0;
  end;

end;

function ReadDuke3DMapData(
  const DIR: PDuke3DDirectories; const numEntries: integer;
  const FileName: TFileName; const MapName: string;
  var hSectors: PDuke3DSector7Array;
  var numSectors: integer;
  var hWalls: PDuke3DWall7Array;
  var numWalls: integer;
  var hSprites: PDuke3DSprite7Array;
  var numSprites: integer): boolean;
var
  posx, posy, posz: integer; // Starting point.
  ang: smallint;
begin
  Result := ReadDuke3DMapData(
    DIR, numEntries,
    FileName, MapName,
    hSectors, numSectors,
    hWalls, numWalls,
    hSprites, numSprites,
    posx, posy, posz, ang);
end;

function ReadDuke3DMapData(
  const DIR: PDuke3DDirectories; const numEntries: integer;
  const FileName: TFileName; const MapName: string;
  var hSectors: PDuke3DSector7Array;
  var numSectors: integer;
  var hWalls: PDuke3DWall7Array;
  var numWalls: integer;
  var hSprites: PDuke3DSprite7Array;
  var numSprites: integer;
  var posx, posy, posz: integer;
  var ang: smallint): boolean;
var
  lump: TDuke3DEntry;
  ver: integer;
  cursectnum: smallint;
  foo: smallInt; // for reading operations
  f: TFileStream;
begin
  Result := False;
  hSectors := nil;
  numSectors := 0;
  hWalls := nil;
  numWalls := 0;
  hSprites := nil;
  numSprites := 0;
  if (DIR <> nil) and (NumEntries > 0) then
  begin
    Lump.Name := ExtractFileName(MapName);
    if Lump.Name = '' then
      Exit;

    Result := GetDuke3DLump(DIR, NumEntries, Lump);
  end
  else
    Result := False;

  if Result then
  begin
    if FileExists(MapName) then
      f := TFileStream.Create(MapName, fmOpenRead or fmShareDenyWrite)
    else
    begin
      f := TFileStream.Create(FileName, fmOpenRead or fmShareDenyWrite);
      f.Seek(Lump.Position, soFromBeginning);
    end;
  end
  else
  begin
    if FileExists(MapName) then
      f := TFileStream.Create(MapName, fmOpenRead or fmShareDenyWrite)
    else
      Exit;
  end;

  Result := False;
  try
    f.Read(ver, SizeOf(ver));
    if ver = DUKE3DVERSION7 then
    begin
      Result := True;
      f.Read(posx, SizeOf(posx));
      f.Read(posy, SizeOf(posy));
      f.Read(posz, SizeOf(posz));
      f.Read(ang, SizeOf(ang));
      f.Read(cursectnum, SizeOf(cursectnum));
      // Sectors
      f.Read(foo, SizeOf(foo));
      numSectors := foo;
      GetMem(hSectors, numSectors * SizeOf(TDuke3DSector7));
      f.Read(hSectors^, numSectors * SizeOf(TDuke3DSector7));
      // Walls
      f.Read(foo, SizeOf(foo));
      numWalls := foo;
      GetMem(hWalls, numWalls * SizeOf(TDuke3DWall7));
      f.Read(hWalls^, numWalls * SizeOf(TDuke3DWall7));
      // Sprites
      f.Read(foo, SizeOf(foo));
      numSprites := foo;
      GetMem(hSprites, numSprites * SizeOf(TDuke3DSprite7));
      f.Read(hSprites^, numSprites * SizeOf(TDuke3DSprite7));
    end;
  finally
    f.Free;
  end;
end;

procedure FreeDuke3DMapData(
  var DIR: PDuke3DDirectories; const numEntries: integer;
  var hSectors: PDuke3DSector7Array; const numSectors: integer;
  var hWalls: PDuke3DWall7Array; const numWalls: integer;
  var hSprites: PDuke3DSprite7Array; const numSprites: integer);
begin
  if DIR <> nil then
    FreeMem(DIR, numEntries * SizeOf(TDuke3DEntry));

  FreeDuke3DMapData(
    hSectors, numSectors,
    hWalls, numWalls,
    hSprites, numSprites);
end;

procedure FreeDuke3DMapData(
  var hSectors: PDuke3DSector7Array; const numSectors: integer;
  var hWalls: PDuke3DWall7Array; const numWalls: integer;
  var hSprites: PDuke3DSprite7Array; const numSprites: integer);
begin
  if hSectors <> nil then
    FreeMem(hSectors, numSectors * SizeOf(TDuke3DSector7));
  if hWalls <> nil then
    FreeMem(hWalls, numWalls * SizeOf(TDuke3DWall7));
  if hSprites <> nil then
    FreeMem(hSprites, numSprites * SizeOf(TDuke3DSprite7));
end;

const
  COORD_MAIN = 0;
  COORD_TOP = 1;
  COORD_BOTTOM = 2;
  NUMCOORDS = 3;

type
  PWallTextureCoordItem = ^TWallTextureCoordItem;
  TWallTextureCoordItem = record
    V1: TD3DValue;
    V1_Pos: TD3DValue;
    V2: TD3DValue;
    V2_Pos: TD3DValue;
  end;

  PWallTextureCoord = ^TWallTextureCoord;
  TWallTextureCoord = record
  case integer of
    0: (U1: TD3DValue;
        U2: TD3DValue;

        V1_Main: TD3DValue;
        V1_MainPos: TD3DValue;
        V2_Main: TD3DValue;
        V2_MainPos: TD3DValue;

        V1_Top: TD3DValue;
        V1_TopPos: TD3DValue;
        V2_Top: TD3DValue;
        V2_TopPos: TD3DValue;

        V1_Bottom: TD3DValue;
        V1_BottomPos: TD3DValue;
        V2_Bottom: TD3DValue;
        V2_BottomPos: TD3DValue);
    1: (foo1: TD3DValue;
        foo2: TD3DValue;
        coords: array[0..2] of TWallTextureCoordItem);
  end;

  TWallTextureCoords = array[0..$FFFF] of TWallTextureCoord;
  PWallTextureCoords = ^TWallTextureCoords;

procedure MakeFirstBigger(var z1, z2: TD3DValue); overload;
var
  zz: TD3DValue;
begin
  if z1 < z2 then
  begin
    zz := z1;
    z1 := z2;
    z2 := zz;
  end;
end;

procedure MakeFirstBigger(var z1, z2: integer); overload;
var
  zz: integer;
begin
  if z1 < z2 then
  begin
    zz := z1;
    z1 := z2;
    z2 := zz;
  end;
end;

procedure GetDuke3DMapData(
  const AScene: TD3DScene;
  const MainGRP: TFileName; const MapName: string; doSprites: boolean = True;
  const Factor: single = DEFDUKE3DIMPORTFACTOR;
  const cFactor: integer = DEFDUKE3DCOMPLEXITYFACTOR;
  const lboost: integer = 0);
var
  DIR: PDuke3DDirectories;
  x, x2, y, y2,
  z, z2, z3, z4,
  zz1, zz2, zz3, zz4: TD3DValue;
  i, j, k, k2, a, m, n, l, NumEntries: integer;
  inf: TD3DGenericTriangleInfo;
  inf2: TD3DGenericTriangleInfo;
  infC: TD3DTessalationInfo;
  infF: TD3DTessalationInfo;
  numVertDelta: integer;
  inf4: TD3DQuadrangleInfo;
  infspr: TD3DStubObjectInfo;
  hSectors: PDuke3DSector7Array;
  numSectors: integer;
  hWalls: PDuke3DWall7Array;
  numWalls: integer;
  hSprites: PDuke3DSprite7Array;
  numSprites: integer;
  Factor4: TD3DValue;
  Factor8: TD3DValue;
  Factor16: TD3DValue;
  sprPushFactor: TD3DValue;
  s_angle: integer;
  pSpr: PDuke3DSprite7;
  pSprDim: PDuke3DSprDimention;
  TextureNames: TDXStringList;
  TextureIDs: PBooleanArray;
  maxTextures: integer;
  strTex: string;
  t2names: TDXStringList;
  sprdim: PDuke3DSprDimentions;
  sinb, cosb, sinc, cosc, fw, fh: single;
  wallheight: TD3DValue;
  WallTexture: PWallTextureCoords;
  CC: TD3DColor;
  poly: TD3DObject;
  sectorDimentions: PDuke3DSectorDimentionsArray;
  posx, posy, posz: integer; // Starting point.
  ang: smallint;
  pw, pw2: PDuke3DWall7;
  ps, ps1: PDuke3DSector7;
  pV: PD3DLVertex;

{$IFDEF DESIGNER}
  oldCanSaveUndo: boolean;
{$ENDIF}

  procedure AddTexName(const id: integer);
  begin
    TextureIDs[id] := True;
    if id > maxTextures then
      maxTextures := id;
  end;

  function dmulscale10(a, b, c, d: integer): integer; safecall;
  begin
    asm
      mov eax, dword ptr[a];
      mov edx, dword ptr[b];
      mov esi, dword ptr[c];
      mov edi, dword ptr[d];
      imul edx;
      mov ebx, eax;
      mov eax, esi;
      mov esi, edx;
      imul edi;
      add eax, ebx;
      adc edx, esi;
      shrd eax, edx, 10;
      mov dword ptr[a], eax;
    end;
    Result := a;
  end;

  function GetFloorHeight(const psec: PDuke3DSector7; const dax, day: integer): integer;
  var
    dx, dy, i, j: integer;
    fTemp: single;
    wal: PDuke3DWall7;
  begin
    if (psec.floorstat and sec_Sloped) = 0 then
    begin
      Result := psec.floorz;
      Exit;
    end;
    wal := @hWalls[psec.wallptr];
    dx := hWalls[wal.Point2].x - wal.x;
    dy := hWalls[wal.Point2].y - wal.y;
    i := (dx * dx) + (dy * dy);
    if i = 0 then
    begin
      Result := psec.floorz;
      Exit;
    end;
    j := dmulscale10(dx, day - wal.y, -dy, dax - wal.x);
    fTemp := (psec.floorheinum * j) / (sqrt(i shr 4));
    Result := psec.floorz + round(fTemp);
  end;

  function GetCeilingHeight(const psec: PDuke3DSector7; const dax, day: integer): integer;
  var
    dx, dy, i, j: integer;
    fTemp: single;
    wal: PDuke3DWall7;
  begin
    if (psec.ceilingstat and sec_Sloped) = 0 then
    begin
      Result := psec.ceilingz;
      Exit;
    end;
    wal := @hWalls[psec.wallptr];
    dx := hWalls[wal.Point2].x - wal.x;
    dy := hWalls[wal.Point2].y - wal.y;
    i := (dx * dx) + (dy * dy);
    if i = 0 then
    begin
      Result := psec.ceilingz;
      Exit;
    end;
    j := dmulscale10(dx, day - wal.y, -dy, dax - wal.x);
    fTemp := (psec.ceilingheinum * j) / (sqrt(i shr 4));
    Result := psec.ceilingz + round(fTemp);
  end;

  function BuildToRad(const nBuild: integer): single;
  begin
    Result := ((1.0 - (nBuild / 2048.0)) * g_2_PI); // see Animate.cpp
  end;

// see polymost_drawalls() in polymost.c

  const pow2long: array[0..31] of integer =
    (
      1, 2, 4, 8,
      16, 32, 64, 128,
      256, 512, 1024, 2048,
      4096, 8192, 16384, 32768,
      65536, 131072, 262144, 524288,
      1048576, 2097152, 4194304, 8388608,
      16777216, 33554432, 67108864, 134217728,
      268435456, 536870912, 1073741824, 2147483647
    );

  procedure PreCalculate;
  var
  	i, k: integer;
    sectnum: integer;
    secdim: PDuke3DSectorDimentions;
  begin
    secdim := @sectorDimentions[0];
    for sectnum := 0 to numSectors - 1 do
    begin
      secdim.maxX := -2147483647;
      secdim.maxY := -2147483647;
      secdim.minX := MAXINT;
      secdim.minY := MAXINT;

      i := hSectors[sectnum].wallptr;
      for k := 0 to hSectors[sectnum].wallnum - 1 do
      begin
        if hWalls[i].x > secdim.maxX then
          secdim.maxX := hWalls[i].X;
        if hWalls[i].x < secdim.minX then
          secdim.minX := hWalls[i].X;
        if hWalls[i].y > secdim.maxY then
          secdim.maxY := hWalls[i].y;
        if hWalls[i].y < secdim.minY then
          secdim.minY := hWalls[i].y;
        i := hWalls[i].Point2;
      end;
      secdim.distX := secdim.maxX - secdim.minX;
      secdim.distY := secdim.maxY - secdim.minY;
      inc(secdim);
    end;

    FillChar(WallTexture^, numWalls * SizeOf(TWallTextureCoord), Chr(0));
  end;

  procedure PreCalculateWallUV(const i, a: integer);
  var
  	j: integer;
    wallheights: array[0..NUMCOORDS - 1] of integer;
    floorheights: array[0..NUMCOORDS - 1] of integer;
    ceilingheights: array[0..NUMCOORDS - 1] of integer;
    coord: PWallTextureCoord;
    coordi: PWallTextureCoordItem;
    wal: PDuke3DWall7;
    w, h: integer;
    mul: integer;
    fmul: single;
    ypan: integer;
    ps, ps1: PDuke3DSector7;
  begin
    coord := @WallTexture[i];
    wal := @hWalls[i];

    ps := @hSectors[a];

    w := sprdim[wal.picnum].Width;
    h := sprdim[wal.picnum].Height;

    if sprdim[wal.picnum].picsiz = 0 then
    begin
      j := 10;//15;
      while (j > 1) and (pow2long[j] > w) do
        dec(j);
      sprdim[wal.picnum].picsiz := j;
      j := 10;//15;
      while (j > 1) and (pow2long[j] > h) do
        dec(j);
      sprdim[wal.picnum].picsiz := sprdim[wal.picnum].picsiz + (j shl 4);
    end;

    if (w <> 0) and (h <> 0) then
    begin
      mul := 1 shl (sprdim[wal.picnum].picsiz shr 4);
      if mul < h then
        mul := mul * 2;
      fmul := mul / 256 / h;

      coord.U1 := wal.xpanning / w;
      coord.U2 := (wal.xrepeat * 8.0) / w + coord.U1;
      if (wal.cstat and wall_xFlipped) <> 0 then
      begin
        coord.U1 := -coord.U1;
        coord.U2 := -coord.U2;
      end;

      if wal.nextsector >= 0 then
        ps1 := @hSectors[wal.nextsector]
      else
        ps1 := ps;

      wallheights[0] := ps.floorz - ps.ceilingz;
      floorheights[0] := ps.floorz;
      ceilingheights[0] := ps.ceilingz;

      wallheights[1] := ps1.ceilingz - ps.ceilingz;
      floorheights[1] := ps1.ceilingz;
      ceilingheights[1] := ps.ceilingz;

      wallheights[2] := ps1.floorz - ps.floorz;
      floorheights[2] := ps1.floorz;
      ceilingheights[2] := ps.floorz;

      coordi := @coord.coords[0];
      for j := 0 to NUMCOORDS - 1 do
      begin
        if wallheights[j] <> 0 then
        begin
          coordi.V1_Pos := -ceilingheights[j] / Factor16;
          coordi.V2_Pos := -floorheights[j] / Factor16;
          if (wal.cstat and wall_BottomSwapped) = 0 then
            ypan := wal.ypanning
          else
            ypan := hWalls[wal.nextwall].ypanning - wal.ypanning;
          if ((wal.cstat and wall_AlignBottom) <> 0) or{xor} (coordi.V1_Pos < coordi.V2_Pos) then
          begin
            coordi.V2 := ypan * fmul;
            coordi.V1 := coordi.V2 - (wallheights[j] / 2048) * (wal.yrepeat / h);
          end
          else
          begin
            coordi.V1 := {-}ypan * mul;
            coordi.V2 := coordi.V1 + (wallheights[j] / 2048) * (wal.yrepeat / h);
          end;
          if (wal.cstat and wall_yFlipped) <> 0 then
          begin
            coordi.V1 := -coordi.V1;
            coordi.V2 := -coordi.V2;
          end;
        end
        else
          coordi^ := coord.coords[0];

        inc(coordi);
      end;
      sprdim[wal.picnum].coord_idx := i;
    end
    else
    begin
      coord.U1 := 0.0;
      coord.U2 := 1.0;
      coord.V1_Main := 0.0;
      coord.V1_MainPos := 0.0;
      coord.V2_Main := 1.0;
      coord.V2_MainPos := 1.0 * DEFDUKE3DIMPORTFACTOR / Factor;
      coord.V1_Top := 0.0;
      coord.V1_TopPos := 0.0;
      coord.V2_Top := 1.0;
      coord.V2_TopPos := 1.0 * DEFDUKE3DIMPORTFACTOR / Factor;
      coord.V1_Bottom := 0.0;
      coord.V1_BottomPos := 0.0;
      coord.V2_Bottom := 1.0;
      coord.V2_BottomPos := 1.0 * DEFDUKE3DIMPORTFACTOR / Factor;
    end;

  end;

  function GetDuke3DColor(const nShade: shortint; const nPalette: byte): TD3DColor;
	var
    shade: byte;
  begin
    if (nshade >= 28) then
      shade := 192
    else if (nshade <= -28) then
      shade := 255
    else
      shade := 87 + 3 * (28 - nShade);

    case nPalette of
       2: begin
            Result := RGB_MAKE(shade, 0, 0);
          end;
      21: begin
            Result := RGB_MAKE(shade, 0, 0);
          end;
      23: begin
            Result := RGB_MAKE(shade, shade, 0);
          end;
    else
      begin
        Result := RGB_MAKE(shade, shade, shade);
      end;
    end;

  end;

  procedure AdjustWallV(const pc: PWallTextureCoord; const pos: integer;
    const pver: PD3DLVertex);
  var
    pwc: PWallTextureCoordItem;
  begin
    pwc := @pc.coords[pos];
    if pwc.V1_Pos <> pwc.V2_Pos then
      pver.tv := (pver.y - pwc.V2_Pos) / (pwc.V1_Pos - pwc.V2_Pos) * (pwc.V1 - pwc.V2) + pwc.V2;
  end;

  procedure AdjustSectorUV(const psec: PDuke3DSector7; const pwall: PDuke3DWall7;
    const pver: PD3DLVertex; const nFloor: boolean);
  var
    number: TD3DValue;
    ang: TD3DValue;
    stat: smallint;
    picnum: integer;
    sina, cosa: TD3DValue;
    pwallptr: PDuke3DWall7;
    panx, pany: TD3DValue;
  begin
    pwallptr := @hWalls[psec.wallptr];
    if nFloor then
    begin
      stat := psec.floorstat;
      picnum := psec.floorpicnum;
      panx := psec.floorxpanning / 256;
      pany := psec.floorypanning / 256;
    end
    else
    begin
      stat := psec.ceilingstat;
      picnum := psec.ceilingpicnum;
      panx := psec.ceilingxpanning / 256;
      pany := psec.ceilingypanning / 256;
    end;
{    pver.tu := pver.tu + panx;
    pver.tv := pver.tv + pany;}
    if (stat and sec_AlignTextureToFirstWall) <> 0 then
    begin
{      if pwall = pwallptr then
      begin
        pver.tu := -panx;
        pver.tv := -pany;
        Exit;
      end;}

      pver.tu := (pwall.x - pwallptr.x);
      pver.tv := (pwall.y - pwallptr.y);

      ang := GetAngle(
        MakeFloatPoint(pwallptr.x, pwallptr.y),
        MakeFloatPoint(hWalls[pwallptr.Point2].x, hWalls[pwallptr.point2].y));
      SinCosS(ang, sina, cosa);

      number := (cosa * pver.tv - sina * pver.tu);
      pver.tu := (sina * pver.tv + cosa * pver.tu);
      pver.tv := number;

{      number := (sina * pany - cosa * panx);//-(cosa * pany - sina * panx);
      panx := (sina * pany + cosa * panx);
      pany := number;}

      number := (cosa * pany - sina * panx);
      panx := (sina * pany + cosa * panx);
      pany := number;
    end
    else
    begin
      pver.tu := pwall.x;
      pver.tv := pwall.y;
{      pver.tu := pver.tu;
      pver.tv := pver.tv;}
    end;

{    pver.tu := pver.tu - panx;
    pver.tv := pver.tv + pany;}
    if (stat and sec_DoubleSmooshiness) <> 0 then
    begin
      pver.tu := pver.tu * 2;
      pver.tv := pver.tv * 2
    end;

    if (stat and sec_xySwap) <> 0 then
    begin
      number := pver.tu;
      pver.tu := pver.tv;
      pver.tv := number;
    end;

    if (stat and sec_xFlip) <> 0 then
      pver.tu := -pver.tu;

    if (stat and sec_yFlip) <> 0 then
      pver.tv := -pver.tv;

    pver.tu := pver.tu / sprdim[picnum].Width / 16;
    pver.tv := pver.tv / sprdim[picnum].Height / 16;

    pver.tu := pver.tu - panx;
    pver.tv := pver.tv - pany;

  end;

begin
  lastSkyTexture := '';

  hSectors := nil;
  numSectors := 0;
  hWalls := nil;
  numWalls := 0;
  hSprites := nil;
  numSprites := 0;
  DIR := nil;
  NumEntries := ReadDuke3DDirectory(MainGRP, DIR);
  if NumEntries > 0 then
    if ReadDuke3DMapData(DIR, NumEntries, MainGRP, MapName,
        hSectors, numSectors,
        hWalls, numWalls,
        hSprites, numSprites,
        posx, posy, posz, ang) then
    begin
     {$IFDEF DESIGNER}
      AScene.SaveUndo;
      oldCanSaveUndo := AScene.CanSaveUndo;
      AScene.CanSaveUndo := False;
     {$ENDIF}

      sprdim := nil;

      Factor16 := (Factor * 16); // Floor & ceilings are 4 bit shifted in MAP file

      AScene.ForcePosition(MakeD3DVector(-(posx / Factor), -(posz / Factor16), posy / Factor));
      AScene.ForceRotation(MakeD3DVector(0.0, BuildToRad(ang), 0.0));


      FillChar(inf, SizeOf(inf), Chr(0));
      for k := 0 to 2 do
        inf.Vertexes[k].color := $FFFFFF;
      FillChar(inf2, SizeOf(inf2), Chr(0));
      for k := 0 to 2 do
        inf2.Vertexes[k].color := $FFFFFF;

      FillChar(infC, SizeOf(infC), Chr(0));
      infC.Cull := D3DCULL_NONE;
      infC.PrimitiveType := D3DPT_TRIANGLEFAN;
      FillChar(infF, SizeOf(infF), Chr(0));
      infF.Cull := D3DCULL_NONE;
      infF.PrimitiveType := D3DPT_TRIANGLEFAN;

      FillChar(inf4, SizeOf(inf4), Chr(0));
      inf4.C1 := $FFFFFF;
      inf4.C2 := $FFFFFF;
      inf4.C3 := $FFFFFF;
      inf4.C4 := $FFFFFF;
      inf4.Transparent := True;
      inf4.flags := flg_DoubleSided;
      FillChar(infspr, SizeOf(infspr), Chr(0));
      infspr.C := $FFFFFF;
      infspr.NumTextures := 1;
      infspr.u := 1.0;
      infspr.v := 1.0;

      maxTextures := -1;
      GetMem(TextureIDs, $FFFF * SizeOf(boolean));
      FillChar(TextureIDs^, $FFFF * SizeOf(boolean), Chr(0));
      TextureNames := TDXStringList.Create;
      try
        ps := @hSectors[0];
        for i := 0 to numSectors - 1 do
        begin
          pw := @hWalls[ps.wallptr];
          for j := 0 to ps.wallnum - 1 do
          begin
            AddTexName(pw.picnum);
            inc(pw);
          end;
          AddTexName(ps.ceilingpicnum);
          AddTexName(ps.floorpicnum);
          inc(ps);
        end;
        t2Names := TDXStringList.Create;
        try
          for i := 0 to maxTextures do
            if TextureIDs[i] then
              t2Names.Add(GetDuke3DLinkDescription(MainGRP, i));

          for i := 0 to numSprites - 1 do
            AddTexName(hSprites[i].picnum);

          AScene.CacheDuke3DTextures(MainGRP, TextureIDs, maxTextures, sprdim, False, DIR, numEntries, lboost);
          AScene.PrepareRTLOptimizer(t2Names, False, True, D3DCULL_NONE, False);
        finally
          t2Names.Free;
        end;

      finally
        TextureNames.Free;
        FreeMem(TextureIDs, $FFFF * SizeOf(boolean));
      end;

      GetMem(WallTexture, numWalls * SizeOf(TWallTextureCoord));
      GetMem(sectorDimentions, numSectors * SizeOf(TDuke3DSectorDimentions));
      PreCalculate;

      ps := @hSectors[0];
      for a := 0 to numSectors - 1 do
      begin
        if ((ps.floorstat and sec_Parallaxing) = 0) or
           ((ps.ceilingstat and sec_Parallaxing) = 0) then
        begin

          k := ps.wallptr;
          pw := @hWalls[k];
          m := k;
          for l := 0 to ps.wallnum - 1 do
          begin

            if l > 0 then
            begin
              n := k;
              k := pw.point2;
              if k = m then
              begin
                k := n + 1;
                m := k;
              end;
            end;

            pw := @hWalls[k];

            PreCalculateWallUV(k, a);

            k2 := pw.point2;
            pw2 := @hWalls[k2];

            CC := GetDuke3DColor(pw.shade, pw.pal);

            inf.Vertexes[0].color := CC;
            inf.Vertexes[1].color := CC;
            inf.Vertexes[2].color := CC;
            inf.TextureName := GetDuke3DLinkDescription(MainGRP, pw.picnum);

            inf2.Vertexes[0].color := CC;
            inf2.Vertexes[1].color := CC;
            inf2.Vertexes[2].color := CC;
            inf2.TextureName := inf.TextureName;

            x  :=  -pw.x / Factor;
            y  :=   pw.y / Factor;
            x2 :=  -pw2.x / Factor;
            y2 :=   pw2.y / Factor;
            if (pw.nextsector = -1) {or
               ((pw.cstat and wall_1way) <> 0) }then
            begin
              z  := -GetCeilingHeight(ps, pw.x, pw.y) / Factor16;
              z2 := -GetFloorHeight(ps, pw.x, pw.y) / Factor16;
              MakeFirstBigger(z, z2);
              z3 := -GetCeilingHeight(ps, pw2.x, pw2.y) / Factor16;
              z4 := -GetFloorHeight(ps, pw2.x, pw2.y) / Factor16;
              MakeFirstBigger(z3, z4);

              inf.Vertexes[0].x := x;
              inf.Vertexes[0].y := z;
              inf.Vertexes[0].z := y;
              inf.Vertexes[0].tu := WallTexture[k].U1;
              inf.Vertexes[0].tv := WallTexture[k].V1_Main;
              AdjustWallV(@WallTexture[k], COORD_MAIN, @inf.Vertexes[0]);

              inf.Vertexes[1].x := x2;
              inf.Vertexes[1].y := z3;
              inf.Vertexes[1].z := y2;
              inf.Vertexes[1].tu := WallTexture[k].U2;
              inf.Vertexes[1].tv := WallTexture[k].V1_Main;
              AdjustWallV(@WallTexture[k], COORD_MAIN, @inf.Vertexes[1]);

              inf.Vertexes[2].x := x2;
              inf.Vertexes[2].y := z4;
              inf.Vertexes[2].z := y2;
              inf.Vertexes[2].tu := WallTexture[k].U2;
              inf.Vertexes[2].tv := WallTexture[k].V2_Main;
              AdjustWallV(@WallTexture[k], COORD_MAIN, @inf.Vertexes[2]);

              inf2.Vertexes[2].x := x;
              inf2.Vertexes[2].y := z2;
              inf2.Vertexes[2].z := y;
              inf2.Vertexes[2].tu := WallTexture[k].U1;
              inf2.Vertexes[2].tv := WallTexture[k].V2_Main;
              AdjustWallV(@WallTexture[k], COORD_MAIN, @inf2.Vertexes[2]);

              if z3 <> z4 then
                AScene.MergePolygonData(ID3D_GenericTriangle, @inf);

              if z <> z2 then
              begin
                inf2.Vertexes[0] := inf.Vertexes[0];
                inf2.Vertexes[1] := inf.Vertexes[2];
                AScene.MergePolygonData(ID3D_GenericTriangle, @inf2);
              end;

            end
            else
            begin
              z  := -ps.ceilingz;
              z2 := -ps.floorz;
              ps1 := @hSectors[pw.nextsector];

              if (((ps1.floorstat and sec_Parallaxing) <> 0) and
                  ((ps1.ceilingstat and sec_Parallaxing) <> 0)) then
                 continue;

              z3 := -ps1.ceilingz;
              z4 := -ps1.floorz;

              if z4 >= z2 then // There is lower texture
              begin
                zz1 := -GetFloorHeight(ps, pw.x, pw.y);
                zz1 := Min(zz1, -GetFloorHeight(ps1, pw.x, pw.y));
                zz1 := zz1 / Factor16;

                inf2.Vertexes[0].x := x;
                inf2.Vertexes[0].y := zz1;
                inf2.Vertexes[0].z := y;
                inf2.Vertexes[0].tu := WallTexture[k].U1;
                inf2.Vertexes[0].tv := WallTexture[k].V2_Bottom;
                AdjustWallV(@WallTexture[k], COORD_BOTTOM, @inf2.Vertexes[0]);

                zz2 := -GetFloorHeight(ps, pw2.x, pw2.y);
                zz2 := Min(zz2, -GetFloorHeight(ps1, pw2.x, pw2.y));
                zz2 := zz2 / Factor16;

                inf2.Vertexes[1].x := x2;
                inf2.Vertexes[1].y := zz2;
                inf2.Vertexes[1].z := y2;
                inf2.Vertexes[1].tu := WallTexture[k].U2;
                inf2.Vertexes[1].tv := WallTexture[k].V2_Bottom;
                AdjustWallV(@WallTexture[k], COORD_BOTTOM, @inf2.Vertexes[1]);

                zz3 := -GetFloorHeight(ps, pw2.x, pw2.y);
                zz3 := Max(zz3, -GetFloorHeight(ps1, pw2.x, pw2.y));
                zz3 := zz3 / Factor16;

                inf2.Vertexes[2].x := x2;
                inf2.Vertexes[2].y := zz3;
                inf2.Vertexes[2].z := y2;
                inf2.Vertexes[2].tu := WallTexture[k].U2;
                inf2.Vertexes[2].tv := WallTexture[k].V1_Bottom;
                AdjustWallV(@WallTexture[k], COORD_BOTTOM, @inf2.Vertexes[2]);

                zz4 := -GetFloorHeight(ps, pw.x, pw.y);
                zz4 := Max(zz4, -GetFloorHeight(ps1, pw.x, pw.y));
                zz4 := zz4 / Factor16;

                inf.Vertexes[2].x := x;
                inf.Vertexes[2].y := zz4;
                inf.Vertexes[2].z := y;
                inf.Vertexes[2].tu := WallTexture[k].U1;
                inf.Vertexes[2].tv := WallTexture[k].V1_Bottom;
                AdjustWallV(@WallTexture[k], COORD_BOTTOM, @inf.Vertexes[2]);

                if zz2 <> zz3 then
                  AScene.MergePolygonData(ID3D_GenericTriangle, @inf2);

                if zz1 <> zz4 then
                begin
                  inf.Vertexes[0] := inf2.Vertexes[0];
                  inf.Vertexes[1] := inf2.Vertexes[2];
                  AScene.MergePolygonData(ID3D_GenericTriangle, @inf);
                end;

              end;
              if z3 <= z then // There is upper texture
              begin
                zz1 := -GetCeilingHeight(ps, pw.x, pw.y);
                zz1 := Max(zz1, -GetCeilingHeight(ps1, pw.x, pw.y));
                zz1 := zz1 / Factor16;

                zz2 := -GetCeilingHeight(ps, pw2.x, pw2.y);
                zz2 := Max(zz2, -GetCeilingHeight(ps1, pw2.x, pw2.y));
                zz2 := zz2 / Factor16;

                zz3 := -GetCeilingHeight(ps, pw2.x, pw2.y);
                zz3 := Min(zz3, -GetCeilingHeight(ps1, pw2.x, pw2.y));
                zz3 := zz3 / Factor16;

                zz4 := -GetCeilingHeight(ps, pw.x, pw.y);
                zz4 := Min(zz4, -GetCeilingHeight(ps1, pw.x, pw.y));
                zz4 := zz4 / Factor16;

                inf.Vertexes[0].x := x;
                inf.Vertexes[0].y := zz1;
                inf.Vertexes[0].z := y;
                inf.Vertexes[0].tu := WallTexture[k].U1;
                inf.Vertexes[0].tv := WallTexture[k].V1_Top;
                AdjustWallV(@WallTexture[k], COORD_TOP, @inf.Vertexes[0]);

                inf.Vertexes[1].x := x2;
                inf.Vertexes[1].y := zz2;
                inf.Vertexes[1].z := y2;
                inf.Vertexes[1].tu := WallTexture[k].U2;
                inf.Vertexes[1].tv := WallTexture[k].V1_Top;
                AdjustWallV(@WallTexture[k], COORD_TOP, @inf.Vertexes[1]);

                inf.Vertexes[2].x := x2;
                inf.Vertexes[2].y := zz3;
                inf.Vertexes[2].z := y2;
                inf.Vertexes[2].tu := WallTexture[k].U2;
                inf.Vertexes[2].tv := WallTexture[k].V2_Top;
                AdjustWallV(@WallTexture[k], COORD_TOP, @inf.Vertexes[2]);

                inf2.Vertexes[2].x := x;
                inf2.Vertexes[2].y := zz4;
                inf2.Vertexes[2].z := y;
                inf2.Vertexes[2].tu := WallTexture[k].U1;
                inf2.Vertexes[2].tv := WallTexture[k].V2_Top;
                AdjustWallV(@WallTexture[k], COORD_TOP, @inf2.Vertexes[2]);

                if zz2 <> zz3 then
                  AScene.MergePolygonData(ID3D_GenericTriangle, @inf);

                if zz1 <> zz4 then
                begin
                  inf2.Vertexes[0] := inf.Vertexes[0];
                  inf2.Vertexes[1] := inf.Vertexes[2];
                  AScene.MergePolygonData(ID3D_GenericTriangle, @inf2);
                end;

              end;
            end;
          end;

        end;
        inc(ps);
      end;

      ps := @hSectors[0];
      for i := 0 to numSectors - 1 do
      begin

        if (ps.ceilingstat and sec_Parallaxing) = 0 then
        begin
          if ps.ceilingpicnum <> 0 then
          begin
            CC := GetDuke3DColor(ps.ceilingshade, ps.ceilingpal);
            pV := @infC.Vertexes[0];
            infC.TextureName := GetDuke3DLinkDescription(MainGRP, ps.ceilingpicnum);
            pw := @hWalls[ps.wallptr];
            for j := ps.wallptr to ps.wallptr + ps.wallnum - 1 do
            begin
              z := GetCeilingHeight(ps, pw.x, pw.y);
              z2 := GetFloorHeight(ps, pw.x, pw.y);
              MakeFirstBigger(z2, z);

              pV.x := -pw.x / Factor;
              pV.y := -z / Factor16;
              pV.z := pw.y / Factor;
              pV.color := CC;
              AdjustSectorUV(ps, pw, pV, False);
              inc(pV);

              if (j + 1) <> pw.point2 then
              begin
                infC.NumVertexes := (integer(pV) - integer(@InfC.Vertexes[0])) div SizeOf(pV^);
                AScene.MergeTessalation(@infC);
                pV := @infC.Vertexes[0];
              end;

              inc(pw);

            end;
            numVertDelta := integer(pV) - integer(@InfC.Vertexes[0]);
            if numVertDelta > 2 * SizeOf(pV^) then
            begin
              infC.NumVertexes := numVertDelta div SizeOf(pV^);
              AScene.MergeTessalation(@infC);
            end;
          end;
        end
        else
          lastSkyTexture := GetDuke3DLinkDescription(MainGRP, ps.ceilingpicnum);

        if (ps.floorstat and sec_Parallaxing) = 0 then
        begin
          if ps.floorpicnum <> 0 then
          begin
            CC := GetDuke3DColor(ps.floorshade, ps.floorpal);
            pV := @infF.Vertexes[0];
            infF.TextureName := GetDuke3DLinkDescription(MainGRP, ps.floorpicnum);
            pw := @hWalls[ps.wallptr];
            for j := ps.wallptr to ps.wallptr + ps.wallnum - 1 do
            begin
              z := GetCeilingHeight(ps, pw.x, pw.y);
              z2 := GetFloorHeight(ps, pw.x, pw.y);
              MakeFirstBigger(z2, z);

              pV.x := -pw.x / Factor;
              pV.y := -z2 / Factor16;
              pV.z := pw.y / Factor;
              pV.color := CC;
              AdjustSectorUV(ps, pw, pV, True);
              inc(pV);

              if (j + 1) <> pw.point2 then
              begin
                infF.NumVertexes := (integer(pV) - integer(@infF.Vertexes[0])) div SizeOf(pV^);
                AScene.MergeTessalation(@infF);
                pV := @infF.Vertexes[0];
              end;

              inc(pw);

            end;
            numVertDelta := integer(pV) - integer(@InfC.Vertexes[0]);
            if numVertDelta > 2 * SizeOf(pV^) then
            begin
              infF.NumVertexes := numVertDelta div SizeOf(pV^);
              AScene.MergeTessalation(@infF);
            end;

          end;
        end;
        inc(ps);
      end;

      if doSprites then
      begin
        sprPushFactor := 16 / Factor; // Push the quadrangle sprites a little bit away from the wall...
        Factor4 := Factor * 4;
        Factor8 := Factor * 8;
        inf4.u := 1.0;
        inf4.v := 1.0;
        infspr.SimpleRotation := False;
        pSpr := @hSprites[0];
        for i := 0 to numSprites - 1 do
        begin
          if ((pSpr.cstat and spr_Invisible) = 0) then
          begin
            if ((pSpr.cstat and $30) = $10) then
            begin
              inf4.TextureName := GetDuke3DLinkDescription(MainGRP, pSpr.picnum);
              CC := GetDuke3DColor(pSpr.shade, pSpr.pal);
              inf4.C1 := CC;
              inf4.C2 := CC;
              inf4.C3 := CC;
              inf4.C4 := CC;
              s_angle := pSpr.ang and (BUILDTORADSIZE - 1);
              sinb := TABLE_BUILDTORADSIN[s_angle];
              cosb := TABLE_BUILDTORADCOS[s_angle];
              if (pSpr.cstat and spr_SingleSided) <> 0 then
              begin // VERTICAL SPRITES
                inf4.flags := 0;
                // Push the sprite a little, so it will not be fixed on the wall
                // (For drawing accuracy)
                sinc := sinb * sprPushFactor;
                cosc := cosb * sprPushFactor;
              end
              else
              begin
                inf4.flags := flg_DoubleSided;
                sinc := 0.0;
                cosc := 0.0;
              end;
              pSprDim := @sprdim[pSpr.picnum];
              fw := pSprDim.Width / Factor8 * pSpr.xRepeat;
              fh := pSprDim.Height / Factor4 * pSpr.yRepeat;
              sinb := sinb * fw;
              cosb := cosb * fw;
              inf4.x1 := -pSpr.x / Factor - sinb - cosc;
              inf4.z1 := pSpr.y / Factor + cosb - sinc;
              inf4.x2 := -pSpr.x / Factor + sinb - cosc;
              inf4.z2 := pSpr.y / Factor - cosb - sinc;

              inf4.x3 := inf4.x1;
              inf4.z3 := inf4.z1;
              inf4.x4 := inf4.x2;
              inf4.z4 := inf4.z2;

              if (pSpr.cstat and spr_Centered) <> 0 then
              begin
                inf4.y1 := -pSpr.z / Factor16 + fh / 2;
                inf4.y2 := inf4.y1;
                inf4.y3 := -pSpr.z / Factor16 - fh / 2;
                inf4.y4 := inf4.y3;
              end
              else
              begin
                inf4.y1 := -pSpr.z / Factor16 + fh;
                inf4.y2 := inf4.y1;
                inf4.y3 := -pSpr.z / Factor16;
                inf4.y4 := inf4.y3;
              end;
              AScene.AddSurface(ID3D_Quadrangle, @inf4);
            end
            else if (pSpr.cstat and $30) = $20 then
            begin // HORIZONTAL SPRITES
              inf4.TextureName := GetDuke3DLinkDescription(MainGRP, pSpr.picnum);
              CC := GetDuke3DColor(pSpr.shade, pSpr.pal);
              inf4.C1 := CC;
              inf4.C2 := CC;
              inf4.C3 := CC;
              inf4.C4 := CC;
              s_angle := pSpr.ang and (BUILDTORADSIZE - 1);
              sinc := TABLE_BUILDTORADSIN[s_angle];
              cosc := TABLE_BUILDTORADCOS[s_angle];
              inf4.flags := flg_DoubleSided;
              pSprDim := @sprdim[pSpr.picnum];
              fw := pSprDim.Width / Factor8 * pSpr.xRepeat;
              fh := pSprDim.Height / Factor4 * pSpr.yRepeat;
              sinb := sinc * fw;
              cosb := cosc * fw;
              sinc := sinc * fh;
              cosc := cosc * fh;
              inf4.x1 := -pSpr.x / Factor - sinb;
              inf4.z1 := pSpr.y / Factor + cosb;
              inf4.x2 := -pSpr.x / Factor + sinb;
              inf4.z2 := pSpr.y / Factor - cosb;

              inf4.x3 := inf4.x1 + cosc;
              inf4.z3 := inf4.z1 + sinc;
              inf4.x4 := inf4.x2 + cosc;
              inf4.z4 := inf4.z2 + sinc;

              if (pSpr.cstat and spr_Centered) = 0 then
              begin
                cosc := - cosc / 2;
                inf4.x1 := inf4.x1 + cosc;
                inf4.x2 := inf4.x2 + cosc;
                inf4.x3 := inf4.x3 + cosc;
                inf4.x4 := inf4.x4 + cosc;
                sinc := - sinc / 2;
                inf4.z1 := inf4.z1 + sinc;
                inf4.z2 := inf4.z2 + sinc;
                inf4.z3 := inf4.z3 + sinc;
                inf4.z4 := inf4.z4 + sinc;
              end;

              inf4.y1 := -pSpr.z / Factor16;
              inf4.y2 := inf4.y1;
              inf4.y3 := inf4.y1;
              inf4.y4 := inf4.y1;
              AScene.AddSurface(ID3D_Quadrangle, @inf4);
            end
            else
            begin // FACE SPRITES
              infspr.TextureNames[0, 0] := GetDuke3DLinkDescription(MainGRP, pSpr.picnum);
              infspr.C := GetDuke3DColor(pSpr.shade, pSpr.pal);
              pSprDim := @sprdim[pSpr.picnum];
              infspr.Width := pSprDim.Width / Factor8 * pSpr.xRepeat;
              infspr.Height := pSprDim.Height / Factor4 * pSpr.yRepeat;
              infspr.x := -pSpr.x / Factor;
              if (pSpr.cstat and spr_Centered) <> 0 then
                infspr.y := -pSpr.z / Factor16
              else
                infspr.y := -pSpr.z / Factor16 + infspr.Height / 2;
              infspr.z := pSpr.y / Factor;
              AScene.AddSurface(ID3D_StubObject, @infspr);
            end;
          end;
          inc(pSpr);
        end;
      end;

     {$IFDEF DESIGNER}
      AScene.CanSaveUndo := oldCanSaveUndo;
     {$ENDIF}

      FreeMem(WallTexture, numWalls * SizeOf(TWallTextureCoord));
      FreeMem(sectorDimentions, numSectors * SizeOf(TDuke3DSectorDimentions));

      ReAllocMem(sprdim, 0);
      FreeDuke3DMapData(
        DIR, numEntries,
        hSectors, numSectors,
        hWalls, numWalls,
        hSprites, numSprites);

    end;

end;

function FindDuke3DDIREntry(const entry: string;
  const DIR: PDuke3DDirectories; const numEntries: integer): integer;
var
  i: integer;
  uEntry: string;
begin
  uEntry := UpperCase(TrimStr(entry));
  for i := 0 to numEntries - 1 do
    if UpperCase(TrimStr(DIR[i].Name)) = uEntry then
    begin
      Result := i;
      Exit;
    end;
  Result := -1;
end;

function ReadDuke3DEntry(const GRPFile: string; const Entry: string; var p: Pointer;
  var size: integer; dir: PDuke3DDirectories = nil; numEntries: integer = -1): boolean;
var
  f: TFileStream;
  needsFreeDir: boolean;
  lumpnum: integer;
begin
  Result := False;
  if Entry = '' then
  begin
    p := nil;
    size := 0;
    Exit;
  end;

  if FileExists(Entry) then
  begin
    f := TFileStream.Create(Entry, fmOpenRead or fmShareDenyNone);
    try
      GetMem(p, f.size);
      f.Read(p^, f.size);
      Result := True;
    finally
      f.Free;
    end;
    Exit;
  end;

  needsFreeDir := False;
  if (dir = nil) or (numEntries = -1) then
  begin
    numEntries := ReadDuke3DDirectory(GRPFile, DIR);
    needsFreeDir := True;
  end;

  if numEntries > 0 then
  begin
    lumpnum := FindDuke3DDIREntry(Entry, DIR, numEntries);
    if lumpnum > -1 then
    begin
      size := DIR[lumpnum].Size;
      GetMem(p, size);
      f := TFileStream.Create(GRPFile, fmOpenRead or fmShareDenyNone);
      try
        f.Seek(DIR[lumpnum].Position, soFromBeginning);
        f.Read(p^, size);
        Result := True;
      finally
        f.Free;
      end;
    end
    else
    begin
      p := nil;
      size := 0;
    end;
    if needsFreeDir then
      FreeMem(DIR, numEntries * SizeOf(TDuke3DEntry));
  end;
end;

function GetDuke3DDefMapName(const map: string): string;
var
  uMap: string;
begin
  uMap := UpperCase(ExtractFileNameOnly(TrimStr(map)));
  if uMap = 'E1L1' then
    Result := 'HOLLYWOOD HOLOCAUST'
  else if uMap = 'E1L2' then
    Result := 'RED LIGHT DISTRICT'
  else if uMap = 'E1L3' then
    Result := 'DEATH ROW'
  else if uMap = 'E1L4' then
    Result := 'TOXIC DUMP'
  else if uMap = 'E1L5' then
    Result := 'THE ABYSS'
  else if uMap = 'E1L6' then
    Result := 'LAUNCH FACILITY'
  else if uMap = 'E1L7' then
    Result := 'FACES OF DEATH'
  else if uMap = 'E1L8' then
    Result := 'USER MAP'
  else if uMap = 'E1L9' then
    Result := 'MULTIPLAYER 3'
  else if uMap = 'E1L10' then
    Result := 'MULTIPLAYER 4'
  else if uMap = 'E1L11' then
    Result := 'MULTIPLAYER 5'

  else if uMap = 'E2L1' then
    Result := 'SPACEPORT'
  else if uMap = 'E2L2' then
    Result := 'INCUBATOR'
  else if uMap = 'E2L3' then
    Result := 'WARP FACTOR'
  else if uMap = 'E2L4' then
    Result := 'FUSION STATION'
  else if uMap = 'E2L5' then
    Result := 'OCCUPIED TERRITORY'
  else if uMap = 'E2L6' then
    Result := 'TIBERIUS STATION'
  else if uMap = 'E2L7' then
    Result := 'LUNAR REACTOR'
  else if uMap = 'E2L8' then
    Result := 'DARK SIDE'
  else if uMap = 'E2L9' then
    Result := 'OVERLORD'
  else if uMap = 'E2L10' then
    Result := 'SPIN CYCLE'
  else if uMap = 'E2L11' then
    Result := 'LUNATIC FRINGE'

  else if uMap = 'E3L1' then
    Result := 'RAW MEAT'
  else if uMap = 'E3L2' then
    Result := 'BANK ROLL'
  else if uMap = 'E3L3' then
    Result := 'FLOOD ZONE'
  else if uMap = 'E3L4' then
    Result := 'L.A. RUMBLE'
  else if uMap = 'E3L5' then
    Result := 'MOVIE SET'
  else if uMap = 'E3L6' then
    Result := 'RABID TRANSIT'
  else if uMap = 'E3L7' then
    Result := 'FAHRENHEIT'
  else if uMap = 'E3L8' then
    Result := 'HOTEL HELL'
  else if uMap = 'E3L9' then
    Result := 'STADIUM'
  else if uMap = 'E3L10' then
    Result := 'TIER DROPS'
  else if uMap = 'E3L11' then
    Result := 'FREEWAY'
  else
    Result := map;
end;


function GetLastDuke3DSkyTexture: string;
begin
  Result := lastSkyTexture;
end;


procedure Preview2DDuke3DMap(
  const FileName: TFileName; const mapName: string; const C: TCanvas;
  const xWidth, yHeight: integer;
  var xShift: single; var yShift: single;
  const fScale: single = 1.0;
  const qPoint: integer = -1);
var
  hSectors: PDuke3DSector7Array;
  numSectors: integer;
  hWalls: PDuke3DWall7Array;
  numWalls: integer;
  hSprites: PDuke3DSprite7Array;
  numSprites: integer;
begin
  ReadDuke3DMapData(FileName, MapName,
    hSectors, numSectors,
    hWalls, numWalls,
    hSprites, numSprites);

  Preview2DDuke3DMap(
    hSectors, numSectors,
    hWalls, numWalls,
    hSprites, numSprites,
    C, xWidth, yHeight, xShift, yShift, fScale, qPoint);

  FreeDuke3DMapData(
    hSectors, numSectors,
    hWalls, numWalls,
    hSprites, numSprites);
end;

procedure GetDuke3DMapDimentions(
  const hWalls: PDuke3DWall7Array; const numWalls: integer;
  var minX, minY, maxX, maxY: integer);
var
  xx, yy: integer;
  pw: PDuke3DWall7;
  i: integer;
begin
  minX :=  MAXINT;
  minY :=  MAXINT;
  maxX := -2147483647;
  maxY := -2147483647;

  // Βρίσκουμε το bounding rectangle του χάρτη
  pw := @hWalls[0];
  for i := 0 to numWalls - 1 do
  begin
    xx := pw.x;
    yy := pw.y;
    if xx < minX then
      minX := xx;
    if xx > maxX then
      maxX := xx;
    if yy < minY then
      minY := yy;
    if yy > maxY then
      maxY := yy;
    inc(pw);
  end;
  dec(minX); dec(minY);
  inc(maxX); inc(maxY);
end;

procedure Preview2DDuke3DMap(
  const hSectors: PDuke3DSector7Array; const numSectors: integer;
  const hWalls: PDuke3DWall7Array; const numWalls: integer;
  const hSprites: PDuke3DSprite7Array; const numSprites: integer;
  const C: TCanvas;
  const xWidth, yHeight: integer;
  var xShift: single; var yShift: single;
  const fScale: single = 1.0;
  minX: integer = 0; minY: integer = 0;
  maxX: integer = 0; maxY: integer = 0;
  const qPoint: integer = -1);
const
  c_BackColor = clBlack;
  c_LineColor = clGray;
  c_SecretLineColor = clFuchsia;
  c_VertexColor = clLime;
  c_SelectedColor = clYellow;
  c_SelectedSectorColor = clLime;//clRed;
var
  i, j: integer;
  Scale: double;
  offsX: integer;
  offsY: integer;
  pw: PDuke3DWall7;
  ps: PDuke3DSector7;
  tmp: single;
  qSector: integer;
  csize: integer;

  function xPixel(const xp: integer): integer;
  var
    xx: integer;
  begin
    xx := xp - MinX;
    try
      Result := trunc(Scale * xx) + offsX;
    except
      try
        Result := round(Scale * xx) + offsX;
      except
        Result := 0;
      end;
    end;
  end;

  function yPixel(const yp: integer): integer;
  var
    yy: integer;
  begin
    yy := yp - MinY;
    try
      Result := trunc(Scale * yy) + offsY;
    except
      try
        Result := trunc(Scale * yy) + offsY;
      except
        Result := 0;
      end;
    end;
  end;

begin
  if (minX = 0) and (minY = 0) and (maxX = 0) and (maxY = 0) then
    GetDuke3DMapDimentions(hWalls, numWalls, minX, minY, maxX, maxY);

  Scale := fScale * Min((xWidth - 1) / (maxX - minX), (yHeight - 1) / (maxY - minY));
  try
    offsX := (xWidth - round(Scale * (maxX - minX) - 0.501)) div 2;
  except
    offsX := 0;
  end;
  try
    offsY := (yHeight - round(Scale * (maxY - minY) - 0.501)) div 2;
  except
    offsY := 0;
  end;

  tmp := Scale * (MaxX - MinX) / 2;
  if xShift > tmp then
    xShift := tmp
  else if xShift < -tmp then
    xShift := -tmp;

  offsX := offsX - round(xShift);

  tmp := Scale * (MaxY - MinY) / 2;
  if yShift > tmp then
    yShift := tmp
  else if yShift < -tmp then
    yShift := -tmp;

  offsY := offsY - round(yShift);

// Γεμίζουμε το background με c_BackColor
  C.Brush.Color := c_BackColor;
  C.Brush.Style := bsSolid;
  C.FillRect(Rect(0, 0, xWidth, yHeight));

  C.Pen.Color := c_LineColor;
  C.Pen.Width := 1;
  C.Pen.Style := psSolid;

// Σχεδιάζουμε τις γραμμές
  pw := @hWalls[0];
  for i := 0 to numWalls - 1 do
  begin
    if pw.point2 >= 0 then // Should always happen
    begin
      C.MoveTo(
        xPixel(pw.x),
        yPixel(pw.y));
      C.LineTo(
        xPixel(hWalls[pw.point2].x),
        yPixel(hWalls[pw.point2].y));
    end;
    inc(pw);
  end;

  C.Pen.Color := c_SecretLineColor;
  C.Pen.Style := psSolid;

  ps := @hSectors[0];
  for i := 0 to numSectors - 1 do
  begin
    if ps.lotag = sec_lotagSecret then
    begin
      pw := @hWalls[ps.wallptr];
      for j := 0 to ps.wallnum - 1 do
      begin
        C.MoveTo(
          xPixel(pw.x),
          yPixel(pw.y));
        C.LineTo(
          xPixel(hWalls[pw.point2].x),
          yPixel(hWalls[pw.point2].y));
        inc(pw);
      end;
    end;
    inc(ps);
  end;

// Σχεδιάζουμε τα σημεία
  pw := @hWalls[0];
  for i := 0 to numWalls - 1 do
  begin
    C.Pixels[xPixel(pw.x), yPixel(pw.y)] := c_VertexColor;
    inc(pw);
  end;

// Σχεδιάζουμε το επιλεγμένο σημείο (αν υπάρχει)
  if (qPoint >= 0) and (qPoint < numWalls) then
  begin
    qSector := -1;
    ps := @hSectors[0];
    for i := 0 to numSectors - 1 do
    begin
      if (qPoint >= ps.wallptr) and (qPoint < ps.wallptr + ps.wallnum) then
      begin
        qSector := i;
        break;
      end;
      inc(ps);
    end;
    if qSector >= 0 then
    begin
      C.Pen.Color := c_SelectedSectorColor;
      C.Pen.Style := psDot;
      pw := @hWalls[ps.wallptr];
      for j := 0 to ps.wallnum - 1 do
      begin
        if pw.point2 >= 0 then // Should always happen
        begin
          C.MoveTo(
            xPixel(pw.x),
            yPixel(pw.y));
          C.LineTo(
            xPixel(hWalls[pw.point2].x),
            yPixel(hWalls[pw.point2].y));
        end;
        inc(pw);
      end;

      C.Pen.Color := c_SelectedColor;
      C.Pen.Width := 2;
      C.Pen.Style := psSolid;

      pw := @hWalls[qPoint];
      C.MoveTo(
        xPixel(pw.x),
        yPixel(pw.y));
      C.LineTo(
        xPixel(hWalls[pw.point2].x),
        yPixel(hWalls[pw.point2].y));

      csize := xWidth div 300;
      if csize < 2 then
        csize := 2;

      C.Pen.Color := c_SelectedColor;
      C.Brush.Style := bsSolid;
      C.Ellipse(xPixel(pw.x) - csize, yPixel(pw.y) - csize, xPixel(pw.x) + csize, yPixel(pw.y) + csize);

      C.Pixels[xPixel(pw.x) - 1, yPixel(pw.y ) - 1] := c_VertexColor;
      C.Pixels[xPixel(pw.x) - 1, yPixel(pw.y )] := c_VertexColor;
      C.Pixels[xPixel(pw.x) - 1, yPixel(pw.y ) + 1] := c_VertexColor;
      C.Pixels[xPixel(pw.x), yPixel(pw.y ) - 1] := c_VertexColor;
      C.Pixels[xPixel(pw.x), yPixel(pw.y ) + 1] := c_VertexColor;
      C.Pixels[xPixel(pw.x) + 1, yPixel(pw.y ) - 1] := c_VertexColor;
      C.Pixels[xPixel(pw.x) + 1, yPixel(pw.y )] := c_VertexColor;
      C.Pixels[xPixel(pw.x) + 1, yPixel(pw.y ) + 1] := c_VertexColor;

      if pw.point2 >= 0 then // Should always happen...
      begin
        C.Pen.Width := 1;
        C.Pen.Style := psDot;

        pw := @hWalls[pw.point2];
        C.MoveTo(
          xPixel(pw.x),
          yPixel(pw.y));
        C.LineTo(
          xPixel(hWalls[pw.point2].x),
          yPixel(hWalls[pw.point2].y));
      end;

      pw := @hWalls[ps.wallptr];

      C.Pen.Color := c_SelectedSectorColor;
      C.Pen.Style := psSolid;
      C.Brush.Style := bsSolid;
      C.Ellipse(xPixel(pw.x) - csize, yPixel(pw.y) - csize, xPixel(pw.x) + csize, yPixel(pw.y) + csize);

      C.Pixels[xPixel(pw.x) - 1, yPixel(pw.y ) - 1] := c_SelectedSectorColor;
      C.Pixels[xPixel(pw.x) - 1, yPixel(pw.y )] := c_SelectedSectorColor;
      C.Pixels[xPixel(pw.x) - 1, yPixel(pw.y ) + 1] := c_SelectedSectorColor;
      C.Pixels[xPixel(pw.x), yPixel(pw.y ) - 1] := c_SelectedSectorColor;
      C.Pixels[xPixel(pw.x), yPixel(pw.y ) + 1] := c_SelectedSectorColor;
      C.Pixels[xPixel(pw.x) + 1, yPixel(pw.y ) - 1] := c_SelectedSectorColor;
      C.Pixels[xPixel(pw.x) + 1, yPixel(pw.y )] := c_SelectedSectorColor;
      C.Pixels[xPixel(pw.x) + 1, yPixel(pw.y ) + 1] := c_SelectedSectorColor;

      C.Brush.Color := c_BackColor;
    end;
  end;

end;

procedure AdjustAngle(var angle: single);
begin
  while angle < -g_PI do
    angle := angle + g_2_PI;
  while angle > g_PI do
    angle := angle - g_2_PI;
end;

function GetAngle(const v1, v2: TPoint): single; overload;
var
  sx, sy: single;
begin
  if v1.x = v2.x then
  begin
    if v2.y > v1.y then
      Result := g_PI_DIV_2
    else if v2.y < v1.y then
      Result := -g_PI_DIV_2
    else
      Result := 0
  end
  else
  begin
    sx := v2.x - v1.x;
    sy := v2.y - v1.y;
    Result := ArcTan2S(sy, sx);
    AdjustAngle(Result);
  end;
end;

function GetAngle(const xx, yy: integer; const v2, v3: TPoint): single; overload;
var
  v1: TPoint;
begin
  v1.x := xx;
  v1.y := yy;
  Result := GetAngle(v2, v1) - GetAngle(v1, v3);
  AdjustAngle(Result);
end;

function GetDuke3D2DPreviewNearestWallIndex(
  const hWalls: PDuke3DWall7Array; const numWalls: integer;
  const xWidth, yHeight: integer;
  var xShift: single; var yShift: single;
  const x, y: integer; // Position to look
  const fScale: single = 1.0;
  minX: integer = 0; minY: integer = 0;
  maxX: integer = 0; maxY: integer = 0): integer;
var
  Scale: double;
  offsX: integer;
  offsY: integer;
  pw: PDuke3DWall7;
  pw2: PDuke3DWall7;
  tmp: single;
  dist, curdist: double;
  i: integer;
  angle,
  minAngle: single;
  v2, v3: TPoint;

  function xPixel(const xp: integer): integer;
  var
    xx: integer;
  begin
    xx := xp - MinX;
    try
      Result := trunc(Scale * xx) + offsX;
    except
      try
        Result := round(Scale * xx) + offsX;
      except
        Result := 0;
      end;
    end;
  end;

  function yPixel(const yp: integer): integer;
  var
    yy: integer;
  begin
    yy := yp - MinY;
    try
      Result := trunc(Scale * yy) + offsY;
    except
      try
        Result := trunc(Scale * yy) + offsY;
      except
        Result := 0;
      end;
    end;
  end;

begin
  if (minX = 0) and (minY = 0) and (maxX = 0) and (maxY = 0) then
    GetDuke3DMapDimentions(hWalls, numWalls, minX, minY, maxX, maxY);

  Scale := fScale * Min((xWidth - 1) / (maxX - minX), (yHeight - 1) / (maxY - minY));
  try
    offsX := (xWidth - round(Scale * (maxX - minX) - 0.501)) div 2;
  except
    offsX := 0;
  end;
  try
    offsY := (yHeight - round(Scale * (maxY - minY) - 0.501)) div 2;
  except
    offsY := 0;
  end;

  tmp := Scale * (MaxX - MinX) / 2;
  if xShift > tmp then
    xShift := tmp
  else if xShift < -tmp then
    xShift := -tmp;

  offsX := offsX - round(xShift);

  tmp := Scale * (MaxY - MinY) / 2;
  if yShift > tmp then
    yShift := tmp
  else if yShift < -tmp then
    yShift := -tmp;

  offsY := offsY - round(yShift);

  dist := g_HUGE;

  minAngle := g_PI_DIV_4;

  Result := -1;
  pw := @hWalls[0];
  for i := 0 to numWalls - 1 do
  begin
    if pw.point2 >= 0 then
    begin
      pw2 := @hWalls[pw.point2];
      v2.x := xPixel(pw.x);
      v2.y := yPixel(pw.y);
      v3.x := xPixel(pw2.x);
      v3.y := yPixel(pw2.y);
      angle := GetAngle(x, y, v2, v3);
      AdjustAngle(angle);
      angle := abs(angle);
      curdist := sqr(xPixel(pw.x) - x) + sqr(yPixel(pw.y) - y) +
                 sqr(xPixel(pw2.x) - x) + sqr(yPixel(pw2.y) - y);
      curdist := curdist * angle;
      if angle < minAngle then
      begin
        minAngle := angle;
        Result := i;
      end;

{      curdist := sqr(xPixel(pw.x) - x) + sqr(yPixel(pw.y) - y) +
                 sqr(xPixel(pw2.x) - x) + sqr(yPixel(pw2.y) - y);}
      if curdist < dist then
      begin
        dist := curdist;
        Result := i;
      end;

    end;
    inc(pw);
  end;
end;

procedure FixDuke3DMapName(var MapName: string);
begin
  if Pos('.', MapName) = 0 then
    MapName := MapName + rsExtMap;
  MapName := UpperCase(MapName);
end;


initialization

finalization
  FreeDuke3DDIRCache;

end.

